 <div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
<clr-datagrid  (clrDgRefresh)="refresh($event)" [(clrDgSelected)]="selected">
  <clr-dg-column [clrDgSortOrder]="descSort">kk</clr-dg-column>

  <clr-dg-row *clrDgItems="let index of [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]">
    <clr-dg-cell >
      <ng-container *ngFor="let repeat of ' '.repeat(index).split('')">
        cell content cell content cell content
      </ng-container>
    </clr-dg-cell>
  </clr-dg-row>
  <clr-dg-footer>
        <clr-dg-pagination #pagination [clrDgPageSize]="pageSize" [clrDgTotalItems]="total" [clrDgPageSize]="pageSize" [(clrDgPage)]="currentPage">
          <clr-dg-page-size [clrPageSizeOptions]="[2, 5, 10]" (change)="onItemsPerPageChange($event)">Items per page</clr-dg-page-size>
          
          {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}}
          of {{pagination.totalItems}} page
      </clr-dg-pagination>
  </clr-dg-footer>
</clr-datagrid>
		</div>
	</div>
</div>
 
 import { Component } from '@angular/core';
import { ClrDatagridStateInterface } from '@clr/angular';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {
  total: number = 20;
  pageSize: number = 5;
  currentPage: number = 2;

  onItemsPerPageChange(event) {
    let newValue = +event.target.value.slice(3);
    if(this.pageSize !== newValue) {
      this.pageSize = newValue;
      
    }
  }

  refresh(state: ClrDatagridStateInterface) {
    console.log(state);
   
    if(state.page) {
 //alert('o')
    }
}
}

 
 legend: {	selector: [
						{ type: 'all', title: '全选' },
						{ type: 'inverse', title: '反选' },
					],
    data: ['Forest', 'Steppe', 'Desert', 'Wetland']
  },



https://support.huaweicloud.com/intl/en-us/sdk-dotnet-devg-obs/obs_25_0408.html
 <!--<div id="x" style="display:none;">
        <input type="radio" name="sex" value="male" checked>男
        <input type="radio" name="sex" value="female">女<p>
    </div>-->
////var dom = document.getElementById('chart-container');
////var dom2 = document.getElementById('chart-container2');
////var myChart = echarts.init(dom, null, {
////    renderer: 'canvas',
////    useDirtyRect: false
////});

////var myChart2 = echarts.init(dom2, null, {
////    renderer: 'canvas',
////    useDirtyRect: false
////});
var array = [];

var myChart = echarts.init(document.getElementById('chart-container'));
//var myChart2 = echarts.init(document.getElementById('chart-container2'));
var app = {};

optionq1 = {
    xAxis: {
        data: ['Animals', 'Fruits', 'Cars']
    },
    yAxis: {},
    dataGroupId: '',
    animationDurationUpdate: 500,
    series: {
        type: 'bar',
        id: 'sales',
        test: myChart.id,
        data: [
            {
                value: 5,
                groupId: 'animals'
            },
            {
                value: 2,
                groupId: 'fruits'
            },
            {
                value: 4,
                groupId: 'cars'
            }
        ],
        universalTransition: {
            enabled: true,
            divideShape: 'clone'
        }
    }
};

//let obj = new Object();
//obj.id = 'myChart'
//obj.class = myChart
//let obj2 = new Object();
//obj2.id = 'myChart2'
//obj2.class = myChart2
//var arr = [obj, obj2]

optionq2 = {
    xAxis: {
        data: ['Animals', 'Fruits', 'Cars']
    },
    yAxis: {},
    dataGroupId: '',
    animationDurationUpdate: 500,
    series: {
        type: 'bar',
        id: 'sales',
        data: [
            {
                value: 5,
                groupId: 'animals'
            },
            {
                value: 2,
                groupId: 'fruits'
            },
            {
                value: 4,
                groupId: 'cars'
            }
        ],
        universalTransition: {
            enabled: true,
            divideShape: 'clone'
        }
    }
};
//create('myChart', optionq1)
//create('myChart2', optionq2)


const clickFun = param => {
    console.log(param)
}
myChart.setOption(optionq1);
myChart.on('click', function (event) {
    if (event.componentType == 'graphic') {
        var gg = array.pop();
        if (gg == '2') {
            document.getElementById('x').style = "display:block"
        } else {
            document.getElementById('x').style = "display:none"
        }
    }
    if (event.data) {
        console.log(event.data.groupId)
        var subData = null;
        var flag;
        if (event.data.groupId != 'Cats') {
            subData = drilldownData.find(function (data) {
                return data.dataGroupId === event.data.groupId;
            });
            flag = 1
        }
        else {
            subData = drilldownData2.find(function (data) {
                return data.dataGroupId === event.data.groupId;
            });
            flag = 2
        }

        if (!subData) {
            return;
        }
        if (flag == 1) {
            array.push(flag);
            document.getElementById('x').style = "display:block;text-align: center;"

         
            option1 = {
                xAxis: {
                    data: subData.data.map(function (item) {
                        return item[0];
                    })
                },
                series: {
                    type: 'bar',
                    id: 'sales',
                    dataGroupId: subData.dataGroupId,
                    data: subData.data.map(function (item) {
                        let h = new Object();
                        h.groupId = item[0]
                        h.value = item[1]
                        return h;
                    })
                    //  subData.data.map(function (item) {
                    //     return item[1];
                    //  })
                    ,
                    universalTransition: {
                        enabled: true,
                        divideShape: 'clone'
                    }
                },
                graphic: [
                    {
                        type: 'text',
                        left: 50, name: 'ggg',
                        top: 20,
                        style: {
                            text: 'Back',
                            fontSize: 18
                        },
                        onclick: function () {
                            myChart.setOption(optionq1);
                        }
                    }
                ]
            }
        }

        if (flag == 2) {
            array.push(flag);
            document.getElementById('x').style = "display:none"
            var g = document.querySelector('input[name="sex"]:checked').value
            option2 = {
                xAxis: {
                    data: subData.data.map(function (item) {
                        return item[0];
                    })
                },
                series: {
                    type: 'bar',
                    id: 'sales',
                    dataGroupId: subData.dataGroupId,
                    data: subData.data.map(function (item) {
                        let h = new Object();
                        h.groupId = item[0]
                        h.value = item[1]
                        return h;
                    })
                    //  subData.data.map(function (item) {
                    //     return item[1];
                    //  })
                    ,
                    universalTransition: {
                        enabled: true,
                        divideShape: 'clone'
                    }
                },
                graphic: [
                    {
                        type: 'text',
                        left: 50,
                        top: 20,
                        style: {
                            text: 'Back',
                            fontSize: 18
                        },
                        name:'kkk',
                        info:
                            {},
                        onclick: function () {
                            myChart.setOption(option1);
                        }
                    }
                ]
            }
        }

        if (flag == 1) {
            myChart.setOption(option1)
        }
        if (flag == 2) {
            myChart.setOption(option2)
        }
    }
})

//myChart2.setOption(optionq2);
//myChart2.on('click', clickFun)
 
const drilldownData = [
    {
        dataGroupId: 'animals',
        data: [
            ['Cats', 4],
            ['Dogs', 2],
            ['Cows', 1],
            ['Sheep', 2],
            ['Pigs', 1]
        ]
    },
    {
        dataGroupId: 'fruits',
        data: [
            ['Apples', 4],
            ['Oranges', 2]
        ]
    },
    {
        dataGroupId: 'cars',
        data: [
            ['Toyota', 4],
            ['Opel', 2],
            ['Volkswagen', 2]
        ]
    }
];

const drilldownData2 = [
    {
        dataGroupId: 'Cats',
        data: [

            ['Dogs', 2],
            ['Cows', 1]

        ]
    }
];
 

//myChart2.on('click', function (event) {
//    if (event.data) {
//        console.log(event.data.groupId)
//        var subData = null;
//        var flag;
//        if (event.data.groupId !== 'Cats') {
//            subData = drilldownData.find(function (data) {
//                return data.dataGroupId === event.data.groupId;
//            });
//            flag = 1
//        }
//        else {
//            subData = drilldownData2.find(function (data) {
//                return data.dataGroupId === event.data.groupId;
//            });
//            flag = 2
//        }

//        if (!subData) {
//            return;
//        }
//        if (flag === 1) {
//             option11 = {
//                xAxis: {
//                    data: subData.data.map(function (item) {
//                        return item[0];
//                    })
//                },
//                series: {
//                    type: 'bar',
//                    id: 'sales',
//                    dataGroupId: subData.dataGroupId,
//                    data: subData.data.map(function (item) {
//                        let h = new Object();
//                        h.groupId = item[0]
//                        h.value = item[1]
//                        return h;
//                    })
//                    //  subData.data.map(function (item) {
//                    //     return item[1];
//                    //  })
//                    ,
//                    universalTransition: {
//                        enabled: true,
//                        divideShape: 'clone'
//                    }
//                },
//                graphic: [
//                    {
//                        type: 'text',
//                        left: 50,
//                        top: 20,
//                        style: {
//                            text: 'Back',
//                            fontSize: 18
//                        },
//                        onclick: function () {
//                            myChart2.setOption(option);
//                        }
//                    }
//                ]
//            }
//        }

//        if (flag === 2) {
//             option22 = {
//                xAxis: {
//                    data: subData.data.map(function (item) {
//                        return item[0];
//                    })
//                },
//                series: {
//                    type: 'bar',
//                    id: 'sales',
//                    dataGroupId: subData.dataGroupId,
//                    data: subData.data.map(function (item) {
//                        var h = new Object();
//                        h.groupId = item[0]
//                        h.value = item[1]
//                        return h;
//                    })
//                    //  subData.data.map(function (item) {
//                    //     return item[1];
//                    //  })
//                    ,
//                    universalTransition: {
//                        enabled: true,
//                        divideShape: 'clone'
//                    }
//                },
//                graphic: [
//                    {
//                        type: 'text',
//                        left: 50,
//                        top: 20,
//                        style: {
//                            text: 'Back',
//                            fontSize: 18
//                        },
//                        onclick: function () {
//                            myChart2.setOption(option11);
//                        }
//                    }
//                ]
//            }
//        }

//        if (flag === 1) {
//            myChart2.setOption(option11)
//        }
//        if (flag === 2) {
//            myChart2.setOption(option22)
//        }
//    }
//});


//if (option && typeof option === 'object') {
//    myChart.setOption(option);
//    myChart2.setOption(option);
//}

//window.addEventListener('resize', myChart.resize);
//window.addEventListener('resize', myChart2.resize);
option = {
  xAxis: {
    data: ['Animals', 'Fruits', 'Cars']
  },
  yAxis: {},
  dataGroupId: '',
  animationDurationUpdate: 500,
  series: {
    type: 'bar',
    id: 'sales',
    data: [
      {
        value: 5,
        groupId: 'animals'
      },
      {
        value: 2,
        groupId: 'fruits'
      },
      {
        value: 4,
        groupId: 'cars'
      }
    ],
    universalTransition: {
      enabled: true,
      divideShape: 'clone'
    }
  }
};
const drilldownData = [
  {
    dataGroupId: 'animals',
    data: [
      ['Cats', 4],
      ['Dogs', 2],
      ['Cows', 1],
      ['Sheep', 2],
      ['Pigs', 1]
    ]
  },
  {
    dataGroupId: 'fruits',
    data: [
      ['Apples', 4],
      ['Oranges', 2]
    ]
  },
  {
    dataGroupId: 'cars',
    data: [
      ['Toyota', 4],
      ['Opel', 2],
      ['Volkswagen', 2]
    ]
  }
];

const drilldownData2 = [
  {
    dataGroupId: 'Cats',
    data: [
    
      ['Dogs', 2],
      ['Cows', 1]
   
    ]
  } 
];
myChart.on('click', function (event) {
  if (event.data) {
  console.log(event.data.groupId)
   var subData=null;
   var flag ;
   if(event.data.groupId!='Cats') {
      subData = drilldownData.find(function (data) {
      return data.dataGroupId === event.data.groupId;
    });
     flag=1
   }
   else{
        subData = drilldownData2.find(function (data) {
      return data.dataGroupId === event.data.groupId;  });
          flag=2
   }
  
    if (!subData) {
      return;
    }
    if(  flag==1){
        option1 ={
      xAxis: {
        data: subData.data.map(function (item) {
          return item[0];
        })
      },
      series: {
        type: 'bar',
        id: 'sales',
        dataGroupId: subData.dataGroupId,
        data:  subData.data.map(function (item) {
      let h = new Object();
      h.groupId=item[0]
        h.value=item[1]
          return h;
        })
      //  subData.data.map(function (item) {
     //     return item[1];
      //  })
        ,
        universalTransition: {
          enabled: true,
          divideShape: 'clone'
        }
      },
      graphic: [
        {
          type: 'text',
          left: 50,
          top: 20,
          style: {
            text: 'Back',
            fontSize: 18
          },
          onclick: function () {
            myChart.setOption(option);
          }
        }
      ]
    }
    }
    
     if(  flag==2){
        option2 ={
      xAxis: {
        data: subData.data.map(function (item) {
          return item[0];
        })
      },
      series: {
        type: 'bar',
        id: 'sales',
        dataGroupId: subData.dataGroupId,
        data:  subData.data.map(function (item) {
      let h = new Object();
      h.groupId=item[0]
        h.value=item[1]
          return h;
        })
      //  subData.data.map(function (item) {
     //     return item[1];
      //  })
        ,
        universalTransition: {
          enabled: true,
          divideShape: 'clone'
        }
      },
      graphic: [
        {
          type: 'text',
          left: 50,
          top: 20,
          style: {
            text: 'Back',
            fontSize: 18
          },
          onclick: function () {
            myChart.setOption(option1);
          }
        }
      ]
    }
    }
    
 if(  flag==1){
    myChart.setOption(option1)}
    if(  flag==2){
    myChart.setOption(option2)}
  }
});
   HttpClient hc = new HttpClient();

            string url = "http://localhost:19461/WeatherForecast/receive";
            string path = @"C:\vm\unlocker-for-vmware-macos\backup\x64\vmware-vmx-debug.exe";
            var postContent = new MultipartFormDataContent();
            string boundary = string.Format("--{0}", DateTime.Now.Ticks.ToString("x"));
            postContent.Headers.Add("ContentType", $"multipart/form-data, boundary={boundary}");

            //if (files.Any())
            //{
            Stream stream = System.IO.File.Open(path, FileMode.Open);

            //files为文件key, files[0].FileName 为文件名称
            postContent.Add(new StreamContent(stream, (int)stream.Length), "files", "ElaneBoot.Schedule-master.7z");
                //Region为请求文件接口需要的参数，根据调用接口参数而定
                //postContent.Add(new StringContent(info.Region), "Region");

            //}
            var response = await hc.PostAsync(url, postContent);
            if (response.IsSuccessStatusCode)
            {
                //var responseStr = await response.Content.ReadAsStringAsync();
                //var responseObj = JsonConvert.DeserializeObject<WebApiResult>(responseStr);
                //return responseObj;
            }

  var body = Request.Body;

            var mediaType = MediaTypeHeaderValue.Parse(Request.ContentType);

            var boundary = mediaType.Parameters
                .SingleOrDefault(x =>
                    string.Equals(x.Name, "boundary", StringComparison.OrdinalIgnoreCase));

            // boundary を囲むダブル クォーテーションを除去する
            var reader = new MultipartReader(boundary.Value.Trim('"'), body);

             


            MultipartSection section = await reader.ReadNextSectionAsync();

            while (section != null)
            {
                bool hasContentDispositionHeader = ContentDispositionHeaderValue.TryParse(
                section.ContentDisposition, out ContentDispositionHeaderValue contentDisposition);

                if (hasContentDispositionHeader)
                {
                    using (var fileStream = System.IO.File.Create(@"c:\test\kk"))
                    {

                        section.Body.CopyToAsync(fileStream).Wait();

                    }
                }

                section = await reader.ReadNextSectionAsync();
            }
https://cloudaffaire.com/azure/update-2-asp-net-core-web-api-upload-and-download-file-stream-exception/
ASPxComboBox combo2 = ((ASPxComboBox)grid.FindEditRowCellTemplateControl(
                grid.Columns["Category2ID"] as GridViewDataComboBoxColumn, "Cat2"));

function getBroswer(){
    var Sys = {};
    var ua = navigator.userAgent.toLowerCase();
    var s;
    (s = ua.match(/edge\/([\d.]+)/)) ? Sys.edge = s[1] :
    (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? Sys.ie = s[1] :
    (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] :
    (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] :
    (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] :
    (s = ua.match(/opera.([\d.]+)/)) ? Sys.opera = s[1] :
    (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;

    if (Sys.edge) return { broswer : "Edge", version : Sys.edge };
    if (Sys.ie) return { broswer : "IE", version : Sys.ie };
    if (Sys.firefox) return { broswer : "Firefox", version : Sys.firefox };
    if (Sys.chrome) return { broswer : "Chrome", version : Sys.chrome };
    if (Sys.opera) return { broswer : "Opera", version : Sys.opera };
    if (Sys.safari) return { broswer : "Safari", version : Sys.safari };
    
    return { broswer : "", version : "0" };
}
var abc = getBroswer();
alert("broswer:"+abc.broswer+" version:"+abc.version);
  var duplicates1 = GetTable().AsEnumerable().Where(g => g["Name"].ToString().Length > 2)
               .Select(g => g["Index"].ToString()).ToList();

https://www.aspsnippets.com/Articles/Using-jQuery-UI-Dialog-Modal-Popup-with-ASPNet-AJAX-UpdatePanel.aspx

var duplicates = GetTable().AsEnumerable()
                .GroupBy(i => new { Name = i.Field<string>("Name"), Subject = i.Field<string>("Subject") })
                .Where(g => g.Count() > 1)
                .Select(g => new { g.Key.Name, g.Key.Subject, 
                    Values = string.Join(",",g.SelectMany(i => i["Index"].ToString()).Distinct().ToList()) }).ToList();

  <asp:AsyncPostBackTrigger ControlID="ddlFruits" EventName="SelectedIndexChanged" />
<%@ Page Language="C#" AutoEventWireup="True" CodeBehind="WebForm4.aspx.cs" Inherits="WebApplication2.WebForm4" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
      <script src="./js1/jquery-2.2.4.min.js"></script>
     <script type="text/javascript" src='https://ajax.​aspnetcdn.com/ajax/jquery.ui/1.8.22/jquery-ui.js'></script>
 <%--   <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.10/themes/redmond/jquery-ui.css">--%>
   <%-- <link rel="stylesheet" href="./css1/ui.jqgrid.css">--%>
   <%-- <link rel="stylesheet" href="./css1/bootstrap.min.css">
    <link rel="stylesheet" href="./css1/bootstrap-datetimepicker.min.css">--%>


    <%--  <script src="./js1/jquery-ui.min.js"></script>
    <script src="./js1/jquery-migrate-1.2.1.js"></script>
    <script src="./js1/bootstrap.min.js"></script>
    <script src="./js1/moment.min.js"></script>
    <script src="./js1/bootstrap-datetimepicker.min.js"></script>
    <script src="./js1/jquery.jqGrid.src.js"></script>--%>
     

    <title></title>
     <style type="text/css">
  /* .roundedBorders {  
    border-radius: 5px;  
    -moz-border-radius: 5px;  
    -khtml-border-radius: 5px;  
    -webkit-border-radius: 5px;  
    overflow: hidden !important;  
    overflow-x: hidden !important;  
    overflow-y: hidden !important;  */
 </style>
       <script type="text/javascript"> 
     
           $("#Button1").click(function () {
                window.parent.$("#export").dialog('close');
            });
       </script>
</head>
<body>
    <form id="form1" runat="server" >
             <asp:Button ID="Button1" runat="server" Text="Button" />
        <asp:ScriptManager ID="ScriptManager1" runat="server"></asp:ScriptManager>
 
      <asp:Label ID="Label7" runat="server" Text="上傳Excel檔Wafer ID Infomation："></asp:Label>
         <asp:FileUpload ID="fuExcel" runat="server" Width="70%" />
        <asp:Button ID="btnUploadExcel" runat="server" Text="Excel上傳" ToolTip="Excel上傳" OnClick="btnUploadExcel_Click" />
    
        <asp:UpdatePanel ID="UpdatePanel1" runat="server">
            <ContentTemplate>
          
            </ContentTemplate>
            <Triggers>
                <asp:PostBackTrigger ControlID="btnUploadExcel"></asp:PostBackTrigger>
            </Triggers>
        </asp:UpdatePanel>
    
   
     
      
    </form>
   
</body>
</html>
 


 
 
