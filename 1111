https://github.com/snowflakedb/snowflake-connector-net/issues/308
https://github.com/ookii-dialogs/ookii-dialogs-winforms/blob/master/sample/shared/MainForm.Designer.cs

https://www.codeproject.com/Questions/802916/Window-Authentication-in-WinForms-Applicaton
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:31592",
      "sslPort": 0
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "weatherforecast",
      "applicationUrl": "http://localhost:5140",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "weatherforecast",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
https://ithelp.ithome.com.tw/articles/10260630



https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book/blob/master/TensorFlow%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%B8%A6%E7%9B%AE%E5%BD%95%EF%BC%89.pdf
https://github.com/eyalmolad/gotask/tree/master
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Linq;
  public  void MoveDirectory(string source, string target)
        {
            var sourcePath = source.TrimEnd('\\', ' ');
            var targetPath = target.TrimEnd('\\', ' ');
            var files = Directory.EnumerateFiles(sourcePath, "*", SearchOption.AllDirectories)
                                 .GroupBy(s => Path.GetDirectoryName(s));
            foreach (var folder in files)
            {
                var targetFolder = folder.Key.Replace(sourcePath, targetPath);
                Directory.CreateDirectory(targetFolder);
                foreach (var file in folder)
                {
                    var targetFile = Path.Combine(targetFolder, Path.GetFileName(file));
                    if (System.IO.File.Exists(targetFile)) System.IO.File.Delete(targetFile);
                    System.IO.File.Move(file, targetFile);
                }
            }
            Directory.Delete(source, true);
        }
namespace webdavconsole
{
    class Program
    {
        static void Main(string[] args)
        {
            var baseUri = "http://127.0.0.1:8080/";
            var directory = "C:\\WebDavRoot\\vr\\";
            HttpListener listener = new HttpListener();
            listener.Prefixes.Add(baseUri);
          //  listener.AuthenticationSchemes = AuthenticationSchemes.Basic;
            //string username = "advtek09.jn";
            //string password = "1qaz2wsxC";
            //listener.AuthenticationSchemeSelectorDelegate = new AuthenticationSchemeSelector(AuthenticationSchemeForClient);

            listener.Realm = "WebDAV server";
            listener.Start();
            Console.WriteLine("WebDAV server running...");

            while (true)
            {
                HttpListenerContext context = listener.GetContext();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                Console.WriteLine("Request: {0} {1}", request.HttpMethod, request.RawUrl);
                //string fullPath = rootPath + request.Url.LocalPath;

                //FileInfo fileInfo = new FileInfo(fullPath);
                var url = "vr";// request.Url.AbsolutePath.TrimEnd('/');
                var filePath = Path.Combine(directory, url);
                // filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                var dept = "OA-MARS02";
                var fileid = "63ed1c05-3232-4904-b265-52258b0179d0";
                filePath = string.Format(@"\\10.55.9.77\PDOCS$\TN002\{0}\DOCUMENTS\{1}\{2}", dept, dept, fileid);
                if (request.HttpMethod == "GET")
                {
                    if (File.Exists(filePath))
                    {
                        response.ContentType = "application/octet-stream";
                        response.ContentLength64 = new FileInfo(filePath).Length;

                        using (var stream = new FileInfo(filePath).OpenRead())
                        {
                            stream.CopyTo(response.OutputStream);
                        }

                        response.StatusCode = (int)HttpStatusCode.OK;
                    }
                    response.Close();
                }
                else if (request.HttpMethod == "PUT")
                { 
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        request.InputStream.CopyTo(fs);
                        response.StatusCode = (int)HttpStatusCode.Created;
                    }

                    response.Close();

                    ////string filePath = request.Url.LocalPath.Substring(1);
                    //filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    //byte[] contentBytes = new byte[request.ContentLength64];
                    //request.InputStream.Read(contentBytes, 0, contentBytes.Length);
                    //string content = Encoding.UTF8.GetString(contentBytes);

                    //Console.WriteLine("Received content: {0}", content);

                    //using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
                    //{
                    //    fileStream.Write(contentBytes, 0, contentBytes.Length);
                    //}

                    //response.StatusCode = 201;
                    //response.StatusDescription = "Created";
                }
                else if (request.HttpMethod == "OPTIONS")
                {
                    response.Headers.Add("Allow", "OPTIONS, TRACE, GET, HEAD, POST, COPY, PROPFIND, DELETE, MOVE, PROPPATCH, MKCOL, LOCK, UNLOCK");
                    response.Headers.Add("Public", "OPTIONS, TRACE, GET, HEAD, POST, PROPFIND, PROPPATCH, MKCOL, PUT, DELETE, COPY, MOVE, LOCK, UNLOCK");
                    response.Headers.Add("MS-Author-Via", "DAV");
                    response.Headers.Add("DAV", "1,2,3");
                    response.StatusCode = 200;
                    response.Close();
                }
                else if (request.HttpMethod == "HEAD")
                { 
                    using (UNCAccessWithCredentials unc = new UNCAccessWithCredentials())
                    {
                        try
                        {
                            if (unc.NetUseWithCredentials(@"\\10.55.9.77\PDOCS$",
                                                      "public.tnnas.PDOCS",
                                                      @"cminl",
                                                      "P@ssw0rd20221209055"))
                            {
                                var path1 = string.Format(@"\\10.55.9.77\PDOCS$\TN002\{0}\DOCUMENTS\{1}\{2}", dept, dept, fileid);
                                if (!File.Exists(path1))
                                {
                                    response.StatusCode = (int)HttpStatusCode.NotFound;
                                    return;
                                }
                                else 
                                {
                                    // Get file info
                                    FileInfo fileInfo = new FileInfo(path1);

                                    response.ContentLength64 = fileInfo.Length;
                                    response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                    string etag = fileInfo.Length.ToString();
                                    response.AddHeader("ETag", "\"" + etag + "\"");
                                    response.Headers.Add(HttpResponseHeader.LastModified, fileInfo.LastWriteTimeUtc.ToString("r"));
                                    response.StatusCode = (int)HttpStatusCode.OK;
                                    response.Close();
                                }
                            }
                            else
                            {

                            }
                        }
                        catch (Exception ex)
                        {
                        
                        }

                    } 
                }
                else if (context.Request.HttpMethod == "LOCK")
                {
                    string requestUrl = request.Url.ToString();
                    string lockToken = Guid.NewGuid().ToString();

                    // Check if the resource is already locked
                    if (IsLocked(requestUrl))
                    {
                        // Resource is already locked, return 423 Locked status code
                        response.StatusCode = (int)HttpStatusCode.Locked;
                        response.Close();
                        return;
                    }

                    //// Parse the lock request XML
                    //XmlDocument xmlDoc = new XmlDocument();
                    //xmlDoc.Load(context.Request.InputStream);
                    //XmlNamespaceManager namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);
                    //namespaceManager.AddNamespace("D", "DAV:");
                    //XmlNode lockScopeNode = xmlDoc.SelectSingleNode("//D:lockscope/D:exclusive", namespaceManager);
                    //XmlNode lockTypeNode = xmlDoc.SelectSingleNode("//D:locktype/D:write", namespaceManager);
                    //XmlNode ownerNode = xmlDoc.SelectSingleNode("//D:owner", namespaceManager);

                    //// Set the lock timeout
                    //int lockTimeout = 0;
                    //string timeoutHeader = context.Request.Headers.Get("Timeout");
                    //if (!string.IsNullOrEmpty(timeoutHeader) && timeoutHeader.StartsWith("Second-"))
                    //{
                    //    int.TryParse(timeoutHeader.Substring(7), out lockTimeout);
                    //}

                    // Create the lock info
                    //LockInfo lockInfo = new LockInfo();
                    //lockInfo.ResourceUrl = requestUrl;
                    //lockInfo.LockScope = lockScopeNode != null ? LockScope.Exclusive : LockScope.Shared;
                    //lockInfo.LockType = lockTypeNode != null ? LockType.Write : LockType.Read;
                    //lockInfo.Owner = ownerNode != null ? ownerNode.InnerText : null;
                    //lockInfo.Timeout = lockTimeout;
                    //lockInfo.LockToken = lockToken;
                    //lockInfo.LockTime = DateTime.UtcNow;

                    //// Add the lock to the locked resources dictionary
                    //_lockedResources.Add(requestUrl, lockInfo);

                    // Set the lock token header in the response
                    response.AddHeader("Lock-Token", $"<urn:uuid:{lockToken}>");

                    // Return 200 OK status code
                    response.StatusCode = (int)HttpStatusCode.OK;
                    response.Close();

                }
                else if (context.Request.HttpMethod == "UNLOCK")
                {
                    string lockToken = context.Request.Headers["Lock-Token"];

                    if (string.IsNullOrEmpty(lockToken))
                    {
                        context.Response.StatusCode = (int)HttpStatusCode.BadRequest;
                        return;
                    }

                    // TODO: Validate the lock token and perform any necessary unlocking logic

                    context.Response.StatusCode = (int)HttpStatusCode.NoContent;
                    response.Close();
                }
                else if (context.Request.HttpMethod == "PROPFIND")
                {
                    // Get the path requested by the client
                    string path = request.Url.LocalPath;

                    if (path == "/")
                        path = directory;
                    // Check if the path is a directory
                    bool isDir = Directory.Exists(path);

                    // If the path is not a directory, check if it is a file
                    if (!isDir)
                    {
                        isDir = File.Exists(path);
                    }

                    // If the path is neither a directory nor a file, return 404 Not Found
                    if (!isDir)
                    {
                        response.StatusCode = (int)HttpStatusCode.NotFound;
                        return;
                    }

                  
                   
                    // Build the XML response
                    var xMultiStatus = new XElement(DNs + "multistatus", new XAttribute(XNamespace.Xmlns + "D", DavNs));
                    var xml = new XDocument(xMultiStatus);

                   // XDocument xml = new XDocument(new XElement(xx+"multistatus", new XAttribute(XNamespace.Xmlns + "D", xxx)));

                    // Add a response element for the directory or file
                    xml.Root.Add(CreateResponseElement(path, isDir));

                    // If the path is a directory, add response elements for the directory's files
                    if (isDir)
                    {
                        string[] files = Directory.GetFiles(path);

                        foreach (string file in files)
                        {
                            xml.Root.Add(CreateResponseElement(file, false));
                        }
                    }

                    byte[] bodyBytes = Encoding.UTF8.GetBytes(xml.ToString());

                    response.StatusCode = 207; // Multi-Status
                    response.ContentType = "text/xml";
                    response.ContentLength64 = bodyBytes.Length;
                    response.OutputStream.Write(bodyBytes, 0, bodyBytes.Length);
                    //response.Close();

                    // Set the response headers
                    //response.ContentType = "text/xml; charset=utf-8";
                    //response.ContentEncoding = Encoding.UTF8;
                    //response.StatusCode = (int)HttpStatusCode.MultiStatus;

                    //// Write the XML response to the output stream
                    //using (Stream output = response.OutputStream)
                    //{
                    //    byte[] buffer = Encoding.UTF8.GetBytes(xml.ToString());
                    //    output.Write(buffer, 0, buffer.Length);
                    //}





                    //string path = context.Request.Url.LocalPath;
                    //filePath = directory + path.Substring(1);


                    //string body = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
                    //     "<D:multistatus xmlns:D=\"DAV:\">" +
                    //     "<D:response>" +
                    //     "<D:href>/file.txt</D:href>" +
                    //     "<D:propstat>" +
                    //     "<D:prop>" +
                    //     "<D:getlastmodified>Wed, 23 Aug 2017 09:23:47 GMT</D:getlastmodified>" +
                    //     "<D:getetag>\"4c4e4f4e455253454c4c4f57\"</D:getetag>" +
                    //     "<D:getcontenttype>text/plain</D:getcontenttype>" +
                    //     "<D:getcontentlength>12</D:getcontentlength>" +
                    //     "</D:prop>" +
                    //     "<D:status>HTTP/1.1 200 OK</D:status>" +
                    //     "</D:propstat>" +
                    //     "</D:response>" +
                    //     "</D:multistatus>";

                    //byte[] bodyBytes = Encoding.UTF8.GetBytes(body);

                    //response.StatusCode = 207; // Multi-Status
                    //response.ContentType = "text/xml";
                    //response.ContentLength64 = bodyBytes.Length;
                    //response.OutputStream.Write(bodyBytes, 0, bodyBytes.Length);
                    //response.Close();

                    //string depthString = request.Headers["Depth"];
                    //int depth = depthString == "infinity" ? int.MaxValue : int.Parse(depthString);

                    ////if (!Directory.Exists(url))
                    ////{
                    ////    response.StatusCode = 404; // Not Found
                    ////    return;
                    ////}

                    //XNamespace davNs = "DAV:";
                    //XDocument xml = new XDocument(
                    //    new XElement(davNs + "multistatus",
                    //        new XElement(davNs + "response",
                    //            CreateResponseElement(xml, new DirectoryInfo(url)),
                    //            new XElement(davNs + "propstat",
                    //                new XElement(davNs + "status", "HTTP/1.1 200 OK"),
                    //                new XElement(davNs + "prop",
                    //                    new XElement(davNs + "creationdate"),
                    //                    new XElement(davNs + "getlastmodified"),
                    //                    new XElement(davNs + "displayname"),
                    //                    new XElement(davNs + "getcontenttype"),
                    //                    new XElement(davNs + "getcontentlength")
                    //                )
                    //            )
                    //        )
                    //    )
                    //);
                    // response.Close();
                }
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                else
                {
                    response.StatusCode = 405;
                    response.Close();
                }
            }
        }
        public static readonly XNamespace DavNs = "DAV:";
        public static readonly XNamespace DNs = "D:";
        private static XElement CreateResponseElement(string path, bool isDir)
        {
            string href = path.Replace('\\', '/');
            string displayName = Path.GetFileName(path);

            XElement response = new XElement(DNs + "response",
                new XElement(DNs + "href", href),
                new XElement(DNs + "propstat",
                    new XElement(DNs +"prop",
                        new XElement(DNs + "displayname", displayName),
                        new XElement(DNs + "getlastmodified", File.GetLastWriteTimeUtc(path).ToString("R")),
                        new XElement(DNs + "getcontentlength", isDir ? "0" : new FileInfo(path).Length.ToString()),
                        new XElement(DNs + "getcontenttype", isDir ? "httpd/unix-directory" : "application/octet-stream"),
                        new XElement(DNs + "resourcetype", isDir ? new XElement(DNs + "collection") : null)),
                    new XElement(DNs + "status", "HTTP/1.1 200 OK")));

            return response;
        }

        static XmlElement CreateElement(XmlElement parent, string name, string ns, string value)
        {
            XmlElement element = parent.OwnerDocument.CreateElement(name, ns);
            element.InnerText = value;
            return element;
        }
        private static XmlElement CreateResponseElement(XmlDocument responseXml, string path)
        {
            XmlElement response = responseXml.CreateElement("D:response", "DAV:");
            XmlElement href = responseXml.CreateElement("D:href", "DAV:");
            href.InnerText = path;
            response.AppendChild(href);
            return response;
        }

        private static void AddDirectoryProperties(XmlElement response, string path)
        {
            DirectoryInfo directory = new DirectoryInfo(path);
            response.AppendChild(CreateElement(response, "D:resourcetype", "DAV:", "<D:collection/>"));
            response.AppendChild(CreateElement(response, "D:getlastmodified", "DAV:", directory.LastWriteTimeUtc.ToString("R")));
            response.AppendChild(CreateElement(response, "D:getcontenttype", "DAV:", "httpd/unix-directory"));
            response.AppendChild(CreateElement(response, "D:getcontentlength", "DAV:", "0"));
        }

        private static void AddFileProperties(XmlElement response, string path)
        {
            FileInfo file = new FileInfo(path);
            response.AppendChild(CreateElement(response, "D:resourcetype", "DAV:", ""));
            response.AppendChild(CreateElement(response, "D:getlastmodified", "DAV:", file.LastWriteTimeUtc.ToString("R")));
            response.AppendChild(CreateElement(response, "D:getcontenttype", "DAV:", "application/octet-stream"));
            response.AppendChild(CreateElement(response, "D:getcontentlength", "DAV:", file.Length.ToString()));
        }
        //static AuthenticationSchemes AuthenticationSchemeForClient(HttpListenerRequest request)
        //{
        //    if (request.Headers["Authorization"] != null && request.Headers["Authorization"].StartsWith("Basic"))
        //    {
        //        string credentials = Encoding.ASCII.GetString(Convert.FromBase64String(request.Headers["Authorization"].Substring(6)));
        //        string[] parts = credentials.Split(':');
        //        string username = parts[0];
        //        string password = parts[1];

        //        // Check username and password against database or other authentication method
        //        if (username == "user1" && password == "pass123")
        //        {
        //            return AuthenticationSchemes.Basic;
        //        }
        //    }

        //    // No valid credentials found, so return 401 Unauthorized
        //    HttpListenerResponse response = context.Response;
        //    response.StatusCode = 401;
        //    response.AddHeader("WWW-Authenticate", "Basic realm=\"" + listener.Realm + "\"");
        //    response.OutputStream.Close();

        //    return AuthenticationSchemes.Anonymous;
        //}

        static bool IsLocked(string path)
        {
            return false;
        }


        
        //private void HandlePropfind(HttpListenerContext context)
        //{
        //    // Get the requested URL and parse it
        //    var url = new Uri(context.Request.Url.GetLeftPart(UriPartial.Path));
        //    var depth = context.Request.Headers["Depth"];
        //    var infiniteDepthMode = depth == "infinity";

        //    // Create the XML document that will contain the properties
        //    var doc = new XDocument(new XDeclaration("1.0", "utf-8", "no"));
        //    var multistatus = new XElement(WebDavXml.Dav + "multistatus");
        //    doc.Add(multistatus);

        //    // If the URL represents a directory, add its contents to the response
        //    if (Directory.Exists(url.LocalPath))
        //    {
        //        var dirInfo = new DirectoryInfo(url.LocalPath);
        //        foreach (var subDir in dirInfo.GetDirectories())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{subDir.Name}/");
        //            multistatus.Add(responseElement);
        //        }
        //        foreach (var file in dirInfo.GetFiles())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{file.Name}");
        //            multistatus.Add(responseElement);
        //        }
        //    }
        //    else if (File.Exists(url.LocalPath))
        //    {
        //        // If the URL represents a file, add its properties to the response
        //        var responseElement = CreateResponseElement(doc, url.ToString());
        //        multistatus.Add(responseElement);
        //    }

        //    // Write the response to the output stream
        //    var responseBytes = Encoding.UTF8.GetBytes(doc.ToString());
        //    context.Response.ContentLength64 = responseBytes.Length;
        //    context.Response.ContentType = "text/xml";
        //    context.Response.OutputStream.Write(responseBytes, 0, responseBytes.Length);
        //    context.Response.OutputStream.Close();
        //}

        //private XElement CreateResponseElement(XDocument doc, string href)
        //{
        //    var response = new XElement(WebDavXml.Dav + "response",
        //        new XElement(WebDavXml.Dav + "href", href),
        //        new XElement(WebDavXml.Dav + "propstat",
        //            new XElement(WebDavXml.Dav + "status", "HTTP/1.1 200 OK"),
        //            new XElement(WebDavXml.Dav + "prop",
        //                new XElement(WebDavXml.Dav + "creationdate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ")),
        //                new XElement(WebDavXml.Dav + "getlastmodified", DateTime.Now.ToString("R")),
        //                new XElement(WebDavXml.Dav + "getcontenttype", "application/octet-stream"),
        //                new XElement(WebDavXml.Dav + "getcontentlength", "0")
        //            )
        //        )
        //    );
        //    return response;
        //}

    }
}
 




using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace webdavconsole
{
    class Program
    {
        static void Main(string[] args)
        {
            var baseUri = "http://127.0.0.1:8080/";
            var directory = "C:\\WebDavRoot\\";
            HttpListener listener = new HttpListener();
            listener.Prefixes.Add(baseUri);
         //   listener.AuthenticationSchemes = AuthenticationSchemes.Ntlm;
            //string username = "advtek09.jn";
            //string password = "1qaz2wsxC";
            //listener.AuthenticationSchemeSelectorDelegate = new AuthenticationSchemeSelector(AuthenticationSchemeForClient);

            listener.Realm = "WebDAV server";
            listener.Start();
            Console.WriteLine("WebDAV server running...");

            while (true)
            {
                HttpListenerContext context = listener.GetContext();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                Console.WriteLine("Request: {0} {1}", request.HttpMethod, request.RawUrl);
                //string fullPath = rootPath + request.Url.LocalPath;

                //FileInfo fileInfo = new FileInfo(fullPath);
                var url = "vr";// request.Url.AbsolutePath.TrimEnd('/');
                var filePath = Path.Combine(directory, url);
                filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                if (request.HttpMethod == "GET")
                {
                    if (File.Exists(filePath))
                    {
                        response.ContentType = "application/octet-stream";
                        response.ContentLength64 = new FileInfo(filePath).Length;

                        using (var stream = new FileInfo(filePath).OpenRead())
                        {
                            stream.CopyTo(response.OutputStream);
                        }

                        response.StatusCode = (int)HttpStatusCode.OK;
                    }
                    response.Close();
                }
                else if (request.HttpMethod == "PUT")
                {
                    filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        request.InputStream.CopyTo(fs);
                        response.StatusCode = (int)HttpStatusCode.Created;
                    }

                    response.Close();

                    ////string filePath = request.Url.LocalPath.Substring(1);
                    //filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    //byte[] contentBytes = new byte[request.ContentLength64];
                    //request.InputStream.Read(contentBytes, 0, contentBytes.Length);
                    //string content = Encoding.UTF8.GetString(contentBytes);

                    //Console.WriteLine("Received content: {0}", content);

                    //using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
                    //{
                    //    fileStream.Write(contentBytes, 0, contentBytes.Length);
                    //}

                    //response.StatusCode = 201;
                    //response.StatusDescription = "Created";
                }
                else if (request.HttpMethod == "OPTIONS")
                {
                    response.Headers.Add("Allow", "OPTIONS, TRACE, GET, HEAD, POST, COPY, PROPFIND, DELETE, MOVE, PROPPATCH, MKCOL, LOCK, UNLOCK");
                    response.Headers.Add("Public", "OPTIONS, TRACE, GET, HEAD, POST, PROPFIND, PROPPATCH, MKCOL, PUT, DELETE, COPY, MOVE, LOCK, UNLOCK");
                    response.Headers.Add("MS-Author-Via", "DAV");
                    response.Headers.Add("DAV", "1,2,3");
                    response.StatusCode = 200;
                    response.Close();
                }
                else if (request.HttpMethod == "HEAD")
                {
                    filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    if (!File.Exists(filePath))
                    {
                        response.StatusCode = (int)HttpStatusCode.NotFound;
                        return;
                    }

                    // Get file info
                    FileInfo fileInfo = new FileInfo(filePath);

                    response.ContentLength64 = fileInfo.Length;
                    response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    string etag = fileInfo.Length.ToString();
                    response.AddHeader("ETag", "\"" + etag + "\"");
                    response.Headers.Add(HttpResponseHeader.LastModified, fileInfo.LastWriteTimeUtc.ToString("r"));
                    response.StatusCode = (int)HttpStatusCode.OK;
                    response.Close();
                }
                else if (context.Request.HttpMethod == "LOCK")
                {
                    string requestUrl = request.Url.ToString();
                    string lockToken = Guid.NewGuid().ToString();

                    // Check if the resource is already locked
                    if (IsLocked(requestUrl))
                    {
                        // Resource is already locked, return 423 Locked status code
                        response.StatusCode = (int)HttpStatusCode.Locked;
                        response.Close();
                        return;
                    }

                    //// Parse the lock request XML
                    //XmlDocument xmlDoc = new XmlDocument();
                    //xmlDoc.Load(context.Request.InputStream);
                    //XmlNamespaceManager namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);
                    //namespaceManager.AddNamespace("D", "DAV:");
                    //XmlNode lockScopeNode = xmlDoc.SelectSingleNode("//D:lockscope/D:exclusive", namespaceManager);
                    //XmlNode lockTypeNode = xmlDoc.SelectSingleNode("//D:locktype/D:write", namespaceManager);
                    //XmlNode ownerNode = xmlDoc.SelectSingleNode("//D:owner", namespaceManager);

                    //// Set the lock timeout
                    //int lockTimeout = 0;
                    //string timeoutHeader = context.Request.Headers.Get("Timeout");
                    //if (!string.IsNullOrEmpty(timeoutHeader) && timeoutHeader.StartsWith("Second-"))
                    //{
                    //    int.TryParse(timeoutHeader.Substring(7), out lockTimeout);
                    //}

                    // Create the lock info
                    //LockInfo lockInfo = new LockInfo();
                    //lockInfo.ResourceUrl = requestUrl;
                    //lockInfo.LockScope = lockScopeNode != null ? LockScope.Exclusive : LockScope.Shared;
                    //lockInfo.LockType = lockTypeNode != null ? LockType.Write : LockType.Read;
                    //lockInfo.Owner = ownerNode != null ? ownerNode.InnerText : null;
                    //lockInfo.Timeout = lockTimeout;
                    //lockInfo.LockToken = lockToken;
                    //lockInfo.LockTime = DateTime.UtcNow;

                    //// Add the lock to the locked resources dictionary
                    //_lockedResources.Add(requestUrl, lockInfo);

                    // Set the lock token header in the response
                    response.AddHeader("Lock-Token", $"<urn:uuid:{lockToken}>");

                    // Return 200 OK status code
                    response.StatusCode = (int)HttpStatusCode.OK;
                    response.Close();

                }
                else if (context.Request.HttpMethod == "UNLOCK")
                {
                    string lockToken = context.Request.Headers["Lock-Token"];

                    if (string.IsNullOrEmpty(lockToken))
                    {
                        context.Response.StatusCode = (int)HttpStatusCode.BadRequest;
                        return;
                    }

                    // TODO: Validate the lock token and perform any necessary unlocking logic

                    context.Response.StatusCode = (int)HttpStatusCode.NoContent;
                    response.Close();
                }
                else if (context.Request.HttpMethod == "PROPFIND")
                {
                    //string depthString = request.Headers["Depth"];
                    //int depth = depthString == "infinity" ? int.MaxValue : int.Parse(depthString);

                    ////if (!Directory.Exists(url))
                    ////{
                    ////    response.StatusCode = 404; // Not Found
                    ////    return;
                    ////}

                    //XNamespace davNs = "DAV:";
                    //XDocument xml = new XDocument(
                    //    new XElement(davNs + "multistatus",
                    //        new XElement(davNs + "response",
                    //            CreateResponseElement(xml, new DirectoryInfo(url)),
                    //            new XElement(davNs + "propstat",
                    //                new XElement(davNs + "status", "HTTP/1.1 200 OK"),
                    //                new XElement(davNs + "prop",
                    //                    new XElement(davNs + "creationdate"),
                    //                    new XElement(davNs + "getlastmodified"),
                    //                    new XElement(davNs + "displayname"),
                    //                    new XElement(davNs + "getcontenttype"),
                    //                    new XElement(davNs + "getcontentlength")
                    //                )
                    //            )
                    //        )
                    //    )
                    //);
                    response.Close();
                }
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                else
                {
                    response.StatusCode = 405;
                    response.Close();
                }
            }
        }
        //static AuthenticationSchemes AuthenticationSchemeForClient(HttpListenerRequest request)
        //{
        //    if (request.Headers["Authorization"] != null && request.Headers["Authorization"].StartsWith("Basic"))
        //    {
        //        string credentials = Encoding.ASCII.GetString(Convert.FromBase64String(request.Headers["Authorization"].Substring(6)));
        //        string[] parts = credentials.Split(':');
        //        string username = parts[0];
        //        string password = parts[1];

        //        // Check username and password against database or other authentication method
        //        if (username == "user1" && password == "pass123")
        //        {
        //            return AuthenticationSchemes.Basic;
        //        }
        //    }

        //    // No valid credentials found, so return 401 Unauthorized
        //    HttpListenerResponse response = context.Response;
        //    response.StatusCode = 401;
        //    response.AddHeader("WWW-Authenticate", "Basic realm=\"" + listener.Realm + "\"");
        //    response.OutputStream.Close();

        //    return AuthenticationSchemes.Anonymous;
        //}

        static bool IsLocked(string path)
        {
            return false;
        }
        //private void HandlePropfind(HttpListenerContext context)
        //{
        //    // Get the requested URL and parse it
        //    var url = new Uri(context.Request.Url.GetLeftPart(UriPartial.Path));
        //    var depth = context.Request.Headers["Depth"];
        //    var infiniteDepthMode = depth == "infinity";

        //    // Create the XML document that will contain the properties
        //    var doc = new XDocument(new XDeclaration("1.0", "utf-8", "no"));
        //    var multistatus = new XElement(WebDavXml.Dav + "multistatus");
        //    doc.Add(multistatus);

        //    // If the URL represents a directory, add its contents to the response
        //    if (Directory.Exists(url.LocalPath))
        //    {
        //        var dirInfo = new DirectoryInfo(url.LocalPath);
        //        foreach (var subDir in dirInfo.GetDirectories())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{subDir.Name}/");
        //            multistatus.Add(responseElement);
        //        }
        //        foreach (var file in dirInfo.GetFiles())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{file.Name}");
        //            multistatus.Add(responseElement);
        //        }
        //    }
        //    else if (File.Exists(url.LocalPath))
        //    {
        //        // If the URL represents a file, add its properties to the response
        //        var responseElement = CreateResponseElement(doc, url.ToString());
        //        multistatus.Add(responseElement);
        //    }

        //    // Write the response to the output stream
        //    var responseBytes = Encoding.UTF8.GetBytes(doc.ToString());
        //    context.Response.ContentLength64 = responseBytes.Length;
        //    context.Response.ContentType = "text/xml";
        //    context.Response.OutputStream.Write(responseBytes, 0, responseBytes.Length);
        //    context.Response.OutputStream.Close();
        //}

        //private XElement CreateResponseElement(XDocument doc, string href)
        //{
        //    var response = new XElement(WebDavXml.Dav + "response",
        //        new XElement(WebDavXml.Dav + "href", href),
        //        new XElement(WebDavXml.Dav + "propstat",
        //            new XElement(WebDavXml.Dav + "status", "HTTP/1.1 200 OK"),
        //            new XElement(WebDavXml.Dav + "prop",
        //                new XElement(WebDavXml.Dav + "creationdate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ")),
        //                new XElement(WebDavXml.Dav + "getlastmodified", DateTime.Now.ToString("R")),
        //                new XElement(WebDavXml.Dav + "getcontenttype", "application/octet-stream"),
        //                new XElement(WebDavXml.Dav + "getcontentlength", "0")
        //            )
        //        )
        //    );
        //    return response;
        //}

    }
}
 


如果您需要将文档从MS office only选项保存到服务器，则PROPFIND和GET是不够的。

下面是您需要实现的列表: GET、HEAD、LOCK、OPTIONS、PROPFIND、PROPPATCH、PUT、UNLOCK

RFC 2518被RFC 4918取代。
http://cn.voidcc.com/question/p-nhrubxuf-baz.html
https://github.com/JingoC/WebDavServer/tree/master/WebDavServer.WebApi
https://github.com/ramondeklein/nwebdav/blob/15afc74b9adb2f4ed9d406022cb61d76fff45157/NWebDav.Server/Handlers/PropFindHandler.cs#L62
https://pydigger.com/pypi/webdavclient
 class Program
    {
        static void Main(string[] args)
        {
            var baseUri = "http://127.0.0.1:8080/";
            var directory = "C:\\WebDavRoot\\";
            HttpListener listener = new HttpListener();
            listener.Prefixes.Add(baseUri);
            listener.AuthenticationSchemes = AuthenticationSchemes.Anonymous;
            listener.Realm = "WebDAV server";
            listener.Start();
            Console.WriteLine("WebDAV server running...");

            while (true)
            {
                HttpListenerContext context = listener.GetContext();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                Console.WriteLine("Request: {0} {1}", request.HttpMethod, request.RawUrl);
                //string fullPath = rootPath + request.Url.LocalPath;

                //FileInfo fileInfo = new FileInfo(fullPath);
                var url = "vr";// request.Url.AbsolutePath.TrimEnd('/');
                var filePath = Path.Combine(directory, url);
                filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                if (request.HttpMethod == "GET")
                {
                    if (File.Exists(filePath))
                    {
                        response.ContentType = "text/plain";
                        response.ContentLength64 = new FileInfo(filePath).Length;

                        using (var stream = new FileInfo(filePath).OpenRead())
                        {
                            stream.CopyTo(response.OutputStream);
                        }

                        response.StatusCode = (int)HttpStatusCode.OK;
                    }
                }
                else if (request.HttpMethod == "PUT")
                {
                    //string filePath = request.Url.LocalPath.Substring(1);
                    //byte[] contentBytes = new byte[request.ContentLength64];
                    //request.InputStream.Read(contentBytes, 0, contentBytes.Length);
                    //string content = Encoding.UTF8.GetString(contentBytes);

                    //Console.WriteLine("Received content: {0}", content);

                    //using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
                    //{
                    //    fileStream.Write(contentBytes, 0, contentBytes.Length);
                    //}

                    //response.StatusCode = 201;
                    //response.StatusDescription = "Created";
                }
                else if (request.HttpMethod == "OPTIONS")
                {
                    response.Headers.Add("Allow", "GET, HEAD, PROPFIND, PROPPATCH, MKCOL, PUT, DELETE, COPY, MOVE, LOCK, UNLOCK");
                    response.Headers.Add("DAV", "1, 2");
                    response.StatusCode = 200;
                    response.OutputStream.Close();
                }
                else if (context.Request.HttpMethod == "PROPFIND")
                {
                    //string path = request.Url.LocalPath.TrimEnd('/');
                    //string xml = @"<?xml version=""1.0"" encoding=""utf-8""?>
                    //<D:multistatus xmlns:D=""DAV:"">
                    //  <D:response>
                    //    <D:href>" + path + @"</D:href>
                    //    <D:propstat>
                    //      <D:prop>
                    //        <D:creationdate>2021-09-01T00:00:00Z</D:creationdate>
                    //        <D:getcontenttype>application/octet-stream</D:getcontenttype>
                    //        <D:getcontentlength>1234</D:getcontentlength>
                    //        <D:getlastmodified>2021-09-01T00:00:00Z</D:getlastmodified>
                    //      </D:prop>
                    //      <D:status>HTTP/1.1 200 OK</D:status>
                    //    </D:propstat>
                    //  </D:response>
                    //</D:multistatus>";

                    //byte[] xmlBytes = Encoding.UTF8.GetBytes(xml);
                    //response.ContentLength64 = xmlBytes.Length;
                    //response.ContentType = "application/xml";
                    //response.OutputStream.Write(xmlBytes, 0, xmlBytes.Length);
                    //response.OutputStream.Close();
                }
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                else
                {
                    response.StatusCode = 405;
                    response.OutputStream.Close();
                }
            }
        }

        //private void HandlePropfind(HttpListenerContext context)
        //{
        //    // Get the requested URL and parse it
        //    var url = new Uri(context.Request.Url.GetLeftPart(UriPartial.Path));
        //    var depth = context.Request.Headers["Depth"];
        //    var infiniteDepthMode = depth == "infinity";

        //    // Create the XML document that will contain the properties
        //    var doc = new XDocument(new XDeclaration("1.0", "utf-8", "no"));
        //    var multistatus = new XElement(WebDavXml.Dav + "multistatus");
        //    doc.Add(multistatus);

        //    // If the URL represents a directory, add its contents to the response
        //    if (Directory.Exists(url.LocalPath))
        //    {
        //        var dirInfo = new DirectoryInfo(url.LocalPath);
        //        foreach (var subDir in dirInfo.GetDirectories())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{subDir.Name}/");
        //            multistatus.Add(responseElement);
        //        }
        //        foreach (var file in dirInfo.GetFiles())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{file.Name}");
        //            multistatus.Add(responseElement);
        //        }
        //    }
        //    else if (File.Exists(url.LocalPath))
        //    {
        //        // If the URL represents a file, add its properties to the response
        //        var responseElement = CreateResponseElement(doc, url.ToString());
        //        multistatus.Add(responseElement);
        //    }

        //    // Write the response to the output stream
        //    var responseBytes = Encoding.UTF8.GetBytes(doc.ToString());
        //    context.Response.ContentLength64 = responseBytes.Length;
        //    context.Response.ContentType = "text/xml";
        //    context.Response.OutputStream.Write(responseBytes, 0, responseBytes.Length);
        //    context.Response.OutputStream.Close();
        //}

        //private XElement CreateResponseElement(XDocument doc, string href)
        //{
        //    var response = new XElement(WebDavXml.Dav + "response",
        //        new XElement(WebDavXml.Dav + "href", href),
        //        new XElement(WebDavXml.Dav + "propstat",
        //            new XElement(WebDavXml.Dav + "status", "HTTP/1.1 200 OK"),
        //            new XElement(WebDavXml.Dav + "prop",
        //                new XElement(WebDavXml.Dav + "creationdate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ")),
        //                new XElement(WebDavXml.Dav + "getlastmodified", DateTime.Now.ToString("R")),
        //                new XElement(WebDavXml.Dav + "getcontenttype", "application/octet-stream"),
        //                new XElement(WebDavXml.Dav + "getcontentlength", "0")
        //            )
        //        )
        //    );
        //    return response;
        //}

    }


using (var conn = new NpgsqlConnection("User ID=postgres;Password=12345;Host=localhost;Port=5432;Database=postgres;Pooling=true;"))
			{
				conn.Open();
				NpgsqlCommand cmdd = new NpgsqlCommand();
				cmdd.Connection = conn;

				NpgsqlParameter[] arParams = new NpgsqlParameter[2];

				arParams[0] = new NpgsqlParameter("$1", NpgsqlTypes.NpgsqlDbType.Varchar, 36);
				arParams[0].Direction = ParameterDirection.Input;
				arParams[0].Value ="k";

				arParams[1] = new NpgsqlParameter("$2", NpgsqlTypes.NpgsqlDbType.Varchar, 36);
				arParams[1].Direction = ParameterDirection.Input;
				arParams[1].Value = "t";

				//	cmdd.CommandType = CommandType.StoredProcedure;
				//cmdd.CommandText = "CALL addnewuser ( @passedemail , @passedpass , '5' )";
				//cmdd.CommandText = "call transfer2($1,$2)";
				cmdd.CommandText = "call transfer2('1','2')";
				//cmdd.Parameters.AddWithValue("sender", NpgsqlDbType.Varchar, "b");
				//cmdd.Parameters.AddWithValue("receiver", NpgsqlDbType.Varchar, "p");
				//cmdd.Parameters.AddRange(arParams);

				cmdd.ExecuteNonQuery();

				//Console.WriteLine(cmdd.Statements[0]);
				conn.Close();
				//conn.Open();
				//using (var cmd = conn.CreateCommand())
				//{
				//	cmd.CommandText = "CALL transfer()";
				//	cmd.ExecuteNonQuery();
				//}
				//conn.Close();
			}
static public IEnumerable<T> SkipLast<T>(this IEnumerable<T> data, int count)
		{
			if (data == null || count < 0) yield break;
			if (count == 0)
			{
				foreach (T item in data)
					yield return item;
			}
			else
			{
				T[] queue = data.Take(count).ToArray();
				int index = 0;

				foreach (T item in data.Skip(count))
				{
					index %= count;
					yield return queue[index];
					queue[index] = item;
					index++;
				}
			}
		}
	}			var o = string.Join("/", a.TrimStart('/').Split('/').SkipLast(1));

https://blog.csdn.net/carcarrot/article/details/106098200

using Microsoft.Practices.EnterpriseLibrary.Data;
using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Webdev
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
           var db= DatabaseFactory.CreateDatabase();
            var cmd = db.GetSqlStringCommand("select * from ddd");
            var g = db.ExecuteDataSet(cmd);
        }
        public static NpgsqlCommand With(this NpgsqlCommand command, string name, object value, NpgsqlDbType dbType)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value ?? DBNull.Value;
            parameter.NpgsqlDbType = dbType;
            command.Parameters.Add(parameter);

            return command;
        }
		public static NpgsqlDbType DbType2PgsqlDbType(DbType DbType_in)
		{
			switch (DbType_in)
			{
				case DbType.Int64:
					return NpgsqlDbType.Bigint;
				case DbType.Int32:
					return NpgsqlDbType.Integer;
				case DbType.Int16:
					return NpgsqlDbType.Smallint;
				case DbType.Boolean:
					return NpgsqlDbType.Boolean; 
				case DbType.String: 
					return NpgsqlDbType.Varchar; 
				case DbType.DateTime:
					return NpgsqlDbType.Timestamp;
				case DbType.Single:
					return NpgsqlDbType.Real;
				case DbType.Double:
					return NpgsqlDbType.Double;
				case DbType.Decimal:
					return NpgsqlDbType.Numeric; 
				default:
					{
						throw new Exception(string.Format("undefined variable type: {0}", DbType_in.ToString() ));
					}
				 
			}
		}
}

https://guokai-ni.blogspot.com/2016/07/kendo-grid-2-inline-edit.html


clrPopoverOpenCloseButton
https://www.pudn.com/detail/5937630

import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { ClrDatagrid, ClrDatagridStateInterface } from '@clr/angular';
import * as faker from 'faker';

import {ClrDatagridFilterInterface} from "@clr/angular";
class OrFilter implements ClrDatagridFilterInterface<any> {
  property: string;
  model: boolean = true;
  txt:string;
  changes = new Subject<any>();
  constructor(_property: string) {
    this.property = _property;
  } 
  isActive(): boolean {
    return this.model !== undefined;
  }
  accepts(row: any) {

    console.log(row) 
    // not used; filtered on server side instead
    return true;
  }
/*  accepts(row: any, search: string): boolean {
    if ((row.hasOwnProperty(this.property)) && (row[this.property] === null)) {
      return false;
    }
    const substrings = search.split('|');
    for (const s of substrings) {
      if ((row.hasOwnProperty(this.property)) &&
        (row[this.property].toString().toLowerCase().includes(s.toLowerCase()))) {
        return true;
      }
    }
    return false;
  }*/
  get state() {
    return {col: 'test', value: this.model,value2:this.txt}
  }
  apply() {
    this.changes.next(this.model);
  }
  clear() {
    this.model = undefined;
    this.apply();
  }
}
class MyFilter implements ClrDatagridFilterInterface<any> {
    model: boolean = true;
    txt:string;
    changes = new Subject<any>();
    isActive(): boolean {
      return this.model !== undefined;
    }
    accepts(user: any) {   console.log(user) 
      // not used; filtered on server side instead
      return true;
    }
    get state() {
      return {col: 'contains-s', value: this.model,value2:this.txt}
    }
    apply() {
      this.changes.next(this.model);
    }
    clear() {
      this.model = undefined;
      this.apply();
    }
}

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {
  OrFilter = new OrFilter('name');
  myFilter2 = new MyFilter();
  private allUsers = Array.from({length: 50}, faker.helpers.userCard);

  users = this.allUsers;
  refresh(state: ClrDatagridStateInterface) {
    console.log(state) 
     console.log(this.allUsers)
      // mock server call 
      setTimeout(()=>{
        if (state.filters) {
          if (state.filters[0].model) {
            this.users = this.allUsers.filter(user => user.name.indexOf('s') > -1);
          } else {
            this.users = this.allUsers.filter(user => user.name.indexOf('s') === -1);
          }
        } else {
          this.users = this.allUsers;
        }
      }, 500);
  }
}

<div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
      <div style="position: relative">
			<clr-datagrid (clrDgRefresh)="refresh($event)">
        <clr-dg-column [clrDgField]="'name'">Name
        <clr-dg-filter [clrDgFilter]="myFilter2">
        "S" <input type="checkbox" clrCheckbox [(ngModel)]="myFilter2.model"/>
        <input clrInput placeholder="Fill me in, scotty!" name="name" [(ngModel)]="myFilter2.txt" />
        <button  (click)="myFilter2.apply()">apply</button>
        <button  (click)="myFilter2.clear()">clear</button>
      </clr-dg-filter>
        </clr-dg-column>



        <clr-dg-column [clrDgField]="'name'">
          Contains 's'
          <clr-dg-filter [clrDgFilter]="OrFilter">
            "S" <input type="checkbox" clrCheckbox [(ngModel)]="OrFilter.model"/>
            <input clrInput placeholder="Fill me in, scotty!" name="name" [(ngModel)]="OrFilter.txt" />
            <button  (click)="OrFilter.apply()">apply</button>
            <button  (click)="OrFilter.clear()">clear</button>
          </clr-dg-filter>
        </clr-dg-column>

        <clr-dg-row *ngFor="let user of users">
          <clr-dg-cell>{{user.name}}
          </clr-dg-cell>
          <clr-dg-cell>
            {{user.name.indexOf('s') !== -1}}
          </clr-dg-cell>
      </clr-dg-row>

        
      <clr-dg-footer>
        <clr-dg-pagination #pagination [clrDgPageSize]="10">
        </clr-dg-pagination>
      </clr-dg-footer>
        

      </clr-datagrid>
      </div>
		</div>
	</div>
</div>





https://stackoverflow.com/questions/470542/how-do-i-limit-the-number-of-rows-returned-by-an-oracle-query-after-ordering/57547541#57547541




import { Component, ElementRef, HostListener } from '@angular/core';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { ClrDatagridStateInterface } from '@clr/angular';
import { Subject } from 'rxjs';

@Component({
  selector: 'my-app',
  styleUrls: ['app.component.css'],
  templateUrl: 'app.component.html'
})
export class AppComponent {
  users: any;
  data: any;
  total: number;
  loading: boolean = true;
  cls:ClrDatagridStateInterface
  refreshGuard = true; // init to true to get first run data
  debouncer = new Subject<any>(); // this is now an enter key debouncer
 page = 0;
  constructor(private http: HttpClient,private elementRef:ElementRef) {
  

  }

  ngOnInit() {
    this.debouncer.asObservable().subscribe(state => {
      this.refresh(state);
    });
  }

  @HostListener("document:keydown.enter", ["$event"]) enterKeydownHandler(
    event: KeyboardEvent
  ) {
      // Use a host listener that checks the event element parent to make sure its a datagrid filter
    const eventSource: HTMLElement = event.srcElement as HTMLElement;
    const parentElement = eventSource.parentElement as HTMLElement;
    if (parentElement.classList.contains("datagrid-filter")) {
      // tell our guard its ok to refresh
      this.refreshGuard = true;
      // pass the latest state to the debouncer to make the request
      this.debouncer.next(this.cls);
    }
  }

  canNext() {
    return (this.data) ? (this.data.page < this.data.total_pages) : false;
  }
  
  canPrevious() {
    return (this.data) ? (this.data.page > 1) : false;
  }

  ngAfterViewInit() {
    this.elementRef.nativeElement.querySelector('.pagination-next')
                                  .addEventListener('click', this.onClick.bind(this));
  }

  onClick(event) {
    if (this.cls.page.from >= this.cls.page.size) {
      this.page = this.cls.page.from / this.cls.page.size;
    }
    this.page++;
    console.log(this.page);
    this.getdata(this.page)
  
  }
  getdata(page){
    this.http.get<any>('https://reqres.in/api/unknown?page=' + page).subscribe(async data => {
        console.log(data);
        this.users = data.data;
        this.data = data;
        this.loading = false;
        this.refreshGuard = false;
      });

  }
  refresh(state: ClrDatagridStateInterface) {
    if (this.refreshGuard) {
    this.loading = true;
    console.log(state);
    this.cls=state
    //this.debouncer.next(state);
    if (this.cls.page.from >= this.cls.page.size) {
      this.page = this.cls.page.from / this.cls.page.size;
    }
    this.page++;
    console.log('refresh:'+this.page);
    this.getdata(this.page)
 
   // console.log(1);
  }
   
  }
}




https://github.com/vmware/clarity/issues/1057
https://stackoverflow.com/questions/60980488/clarity-datagrid-column-input-filter-losing-focus-on-first-keypress-after-moving
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, HostListener, ViewChild } from "@angular/core";
import { FetchResult, Inventory } from "./inventory/inventory";
import { User } from "./inventory/user";
import { ClrDatagridStateInterface } from "@clr/angular";
import { Subject } from "rxjs";
import { debounceTime } from "rxjs/operators";

@Component({
  selector: "clr-datagrid-full-demo",
  providers: [Inventory],
  templateUrl: "./app.component.html",
  styleUrls: ["./app.component.css"]
})
export class DatagridFullDemo {
  users: User[];
  total: number;
  loading: boolean = true;
  selectedUser;
  refreshGuard = true; // init to true to get first run data
  debouncer = new Subject<any>();
  datagridState: ClrDatagridStateInterface;

  constructor(private inventory: Inventory) {
    inventory.size = 103;
    this.inventory.reset();
    this.users = this.inventory.all;
  }

  ngOnInit() {
    this.debouncer.asObservable().subscribe(state => {
      this.doRefresh(state);
    });
  }

  private doRefresh(state: ClrDatagridStateInterface) {
    if (this.refreshGuard) {
      this.loading = true;
      const filters: { [prop: string]: any[] } = {};
      console.log("refresh called");
      if (state.filters) {
        for (const filter of state.filters) {
          const { property, value } = <{ property: string; value: string }>(
            filter
          );
          filters[property] = [value];
        }
      }
      this.inventory
        .filter(filters)
        .sort(<{ by: string; reverse: boolean }>state.sort)
        .fetch(state.page.from, state.page.size)
        .then((result: FetchResult) => {
          this.users = result.users;
          this.total = result.length;
          this.loading = false;
          this.selectedUser = this.users[1];
          this.refreshGuard = false;
        });
    }
  }

  @HostListener("document:keydown.enter", ["$event"]) enterKeydownHandler(
    event: KeyboardEvent
  ) {
    const eventSource: HTMLElement = event.srcElement as HTMLElement;
    const parentElement = eventSource.parentElement as HTMLElement;
    if (parentElement.classList.contains("datagrid-filter")) {
      this.refreshGuard = true;
      this.debouncer.next(this.datagridState);
    }
  }

  refresh(state: ClrDatagridStateInterface) {
    this.datagridState = state;
    this.debouncer.next(state);
  }
}

<div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
			<h2>SO <a href="https://stackoverflow.com/questions/60980488/clarity-datagrid-column-input-filter-losing-focus-on-first-keypress-after-moving">60980488</a></h2>

<clr-datagrid (clrDgRefresh)="refresh($event)" [clrDgLoading]="loading" [(clrDgSingleSelected)]="selectedUser">
  <clr-dg-column [clrDgField]="'id'">User ID</clr-dg-column>
  <clr-dg-column [clrDgField]="'name'">Name</clr-dg-column>

  <clr-dg-row *ngFor="let user of users" [clrDgItem]="user" >
    <clr-dg-cell>{{user.id}}</clr-dg-cell>
    <clr-dg-cell>{{user.name}}</clr-dg-cell>
  </clr-dg-row>

  <clr-dg-footer>
    {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{total}} users
    <clr-dg-pagination #pagination [clrDgTotalItems]="total" [clrDgPageSize]="10"></clr-dg-pagination>
  </clr-dg-footer>
</clr-datagrid>

Selected User: {{this.selectedUser | json}}
		</div>
	</div>
</div>



https://github.com/vmware/clarity/issues/1196 <div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
<clr-datagrid  (clrDgRefresh)="refresh($event)" [(clrDgSelected)]="selected">
  <clr-dg-column [clrDgSortOrder]="descSort">kk</clr-dg-column>

  <clr-dg-row *clrDgItems="let index of [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]">
    <clr-dg-cell >
      <ng-container *ngFor="let repeat of ' '.repeat(index).split('')">
        cell content cell content cell content
      </ng-container>
    </clr-dg-cell>
  </clr-dg-row>
  <clr-dg-footer>
        <clr-dg-pagination #pagination [clrDgPageSize]="pageSize" [clrDgTotalItems]="total" [clrDgPageSize]="pageSize" [(clrDgPage)]="currentPage">
          <clr-dg-page-size [clrPageSizeOptions]="[2, 5, 10]" (change)="onItemsPerPageChange($event)">Items per page</clr-dg-page-size>
          
          {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}}
          of {{pagination.totalItems}} page
      </clr-dg-pagination>
  </clr-dg-footer>
</clr-datagrid>
		</div>
	</div>
</div>
 
 import { Component } from '@angular/core';
import { ClrDatagridStateInterface } from '@clr/angular';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {
  total: number = 20;
  pageSize: number = 5;
  currentPage: number = 2;

  onItemsPerPageChange(event) {
    let newValue = +event.target.value.slice(3);
    if(this.pageSize !== newValue) {
      this.pageSize = newValue;
      
    }
  }

  refresh(state: ClrDatagridStateInterface) {
    console.log(state);
   
    if(state.page) {
 //alert('o')
    }
}
}

 
 legend: {	selector: [
						{ type: 'all', title: '全选' },
						{ type: 'inverse', title: '反选' },
					],
    data: ['Forest', 'Steppe', 'Desert', 'Wetland']
  },



https://support.huaweicloud.com/intl/en-us/sdk-dotnet-devg-obs/obs_25_0408.html
 <!--<div id="x" style="display:none;">
        <input type="radio" name="sex" value="male" checked>男
        <input type="radio" name="sex" value="female">女<p>
    </div>-->
////var dom = document.getElementById('chart-container');
////var dom2 = document.getElementById('chart-container2');
////var myChart = echarts.init(dom, null, {
////    renderer: 'canvas',
////    useDirtyRect: false
////});

////var myChart2 = echarts.init(dom2, null, {
////    renderer: 'canvas',
////    useDirtyRect: false
////});
var array = [];

var myChart = echarts.init(document.getElementById('chart-container'));
//var myChart2 = echarts.init(document.getElementById('chart-container2'));
var app = {};

optionq1 = {
    xAxis: {
        data: ['Animals', 'Fruits', 'Cars']
    },
    yAxis: {},
    dataGroupId: '',
    animationDurationUpdate: 500,
    series: {
        type: 'bar',
        id: 'sales',
        test: myChart.id,
        data: [
            {
                value: 5,
                groupId: 'animals'
            },
            {
                value: 2,
                groupId: 'fruits'
            },
            {
                value: 4,
                groupId: 'cars'
            }
        ],
        universalTransition: {
            enabled: true,
            divideShape: 'clone'
        }
    }
};

//let obj = new Object();
//obj.id = 'myChart'
//obj.class = myChart
//let obj2 = new Object();
//obj2.id = 'myChart2'
//obj2.class = myChart2
//var arr = [obj, obj2]

optionq2 = {
    xAxis: {
        data: ['Animals', 'Fruits', 'Cars']
    },
    yAxis: {},
    dataGroupId: '',
    animationDurationUpdate: 500,
    series: {
        type: 'bar',
        id: 'sales',
        data: [
            {
                value: 5,
                groupId: 'animals'
            },
            {
                value: 2,
                groupId: 'fruits'
            },
            {
                value: 4,
                groupId: 'cars'
            }
        ],
        universalTransition: {
            enabled: true,
            divideShape: 'clone'
        }
    }
};
//create('myChart', optionq1)
//create('myChart2', optionq2)


const clickFun = param => {
    console.log(param)
}
myChart.setOption(optionq1);
myChart.on('click', function (event) {
    if (event.componentType == 'graphic') {
        var gg = array.pop();
        if (gg == '2') {
            document.getElementById('x').style = "display:block"
        } else {
            document.getElementById('x').style = "display:none"
        }
    }
    if (event.data) {
        console.log(event.data.groupId)
        var subData = null;
        var flag;
        if (event.data.groupId != 'Cats') {
            subData = drilldownData.find(function (data) {
                return data.dataGroupId === event.data.groupId;
            });
            flag = 1
        }
        else {
            subData = drilldownData2.find(function (data) {
                return data.dataGroupId === event.data.groupId;
            });
            flag = 2
        }

        if (!subData) {
            return;
        }
        if (flag == 1) {
            array.push(flag);
            document.getElementById('x').style = "display:block;text-align: center;"

         
            option1 = {
                xAxis: {
                    data: subData.data.map(function (item) {
                        return item[0];
                    })
                },
                series: {
                    type: 'bar',
                    id: 'sales',
                    dataGroupId: subData.dataGroupId,
                    data: subData.data.map(function (item) {
                        let h = new Object();
                        h.groupId = item[0]
                        h.value = item[1]
                        return h;
                    })
                    //  subData.data.map(function (item) {
                    //     return item[1];
                    //  })
                    ,
                    universalTransition: {
                        enabled: true,
                        divideShape: 'clone'
                    }
                },
                graphic: [
                    {
                        type: 'text',
                        left: 50, name: 'ggg',
                        top: 20,
                        style: {
                            text: 'Back',
                            fontSize: 18
                        },
                        onclick: function () {
                            myChart.setOption(optionq1);
                        }
                    }
                ]
            }
        }

        if (flag == 2) {
            array.push(flag);
            document.getElementById('x').style = "display:none"
            var g = document.querySelector('input[name="sex"]:checked').value
            option2 = {
                xAxis: {
                    data: subData.data.map(function (item) {
                        return item[0];
                    })
                },
                series: {
                    type: 'bar',
                    id: 'sales',
                    dataGroupId: subData.dataGroupId,
                    data: subData.data.map(function (item) {
                        let h = new Object();
                        h.groupId = item[0]
                        h.value = item[1]
                        return h;
                    })
                    //  subData.data.map(function (item) {
                    //     return item[1];
                    //  })
                    ,
                    universalTransition: {
                        enabled: true,
                        divideShape: 'clone'
                    }
                },
                graphic: [
                    {
                        type: 'text',
                        left: 50,
                        top: 20,
                        style: {
                            text: 'Back',
                            fontSize: 18
                        },
                        name:'kkk',
                        info:
                            {},
                        onclick: function () {
                            myChart.setOption(option1);
                        }
                    }
                ]
            }
        }

        if (flag == 1) {
            myChart.setOption(option1)
        }
        if (flag == 2) {
            myChart.setOption(option2)
        }
    }
})

//myChart2.setOption(optionq2);
//myChart2.on('click', clickFun)
 
const drilldownData = [
    {
        dataGroupId: 'animals',
        data: [
            ['Cats', 4],
            ['Dogs', 2],
            ['Cows', 1],
            ['Sheep', 2],
            ['Pigs', 1]
        ]
    },
    {
        dataGroupId: 'fruits',
        data: [
            ['Apples', 4],
            ['Oranges', 2]
        ]
    },
    {
        dataGroupId: 'cars',
        data: [
            ['Toyota', 4],
            ['Opel', 2],
            ['Volkswagen', 2]
        ]
    }
];

const drilldownData2 = [
    {
        dataGroupId: 'Cats',
        data: [

            ['Dogs', 2],
            ['Cows', 1]

        ]
    }
];
 

//myChart2.on('click', function (event) {
//    if (event.data) {
//        console.log(event.data.groupId)
//        var subData = null;
//        var flag;
//        if (event.data.groupId !== 'Cats') {
//            subData = drilldownData.find(function (data) {
//                return data.dataGroupId === event.data.groupId;
//            });
//            flag = 1
//        }
//        else {
//            subData = drilldownData2.find(function (data) {
//                return data.dataGroupId === event.data.groupId;
//            });
//            flag = 2
//        }

//        if (!subData) {
//            return;
//        }
//        if (flag === 1) {
//             option11 = {
//                xAxis: {
//                    data: subData.data.map(function (item) {
//                        return item[0];
//                    })
//                },
//                series: {
//                    type: 'bar',
//                    id: 'sales',
//                    dataGroupId: subData.dataGroupId,
//                    data: subData.data.map(function (item) {
//                        let h = new Object();
//                        h.groupId = item[0]
//                        h.value = item[1]
//                        return h;
//                    })
//                    //  subData.data.map(function (item) {
//                    //     return item[1];
//                    //  })
//                    ,
//                    universalTransition: {
//                        enabled: true,
//                        divideShape: 'clone'
//                    }
//                },
//                graphic: [
//                    {
//                        type: 'text',
//                        left: 50,
//                        top: 20,
//                        style: {
//                            text: 'Back',
//                            fontSize: 18
//                        },
//                        onclick: function () {
//                            myChart2.setOption(option);
//                        }
//                    }
//                ]
//            }
//        }

//        if (flag === 2) {
//             option22 = {
//                xAxis: {
//                    data: subData.data.map(function (item) {
//                        return item[0];
//                    })
//                },
//                series: {
//                    type: 'bar',
//                    id: 'sales',
//                    dataGroupId: subData.dataGroupId,
//                    data: subData.data.map(function (item) {
//                        var h = new Object();
//                        h.groupId = item[0]
//                        h.value = item[1]
//                        return h;
//                    })
//                    //  subData.data.map(function (item) {
//                    //     return item[1];
//                    //  })
//                    ,
//                    universalTransition: {
//                        enabled: true,
//                        divideShape: 'clone'
//                    }
//                },
//                graphic: [
//                    {
//                        type: 'text',
//                        left: 50,
//                        top: 20,
//                        style: {
//                            text: 'Back',
//                            fontSize: 18
//                        },
//                        onclick: function () {
//                            myChart2.setOption(option11);
//                        }
//                    }
//                ]
//            }
//        }

//        if (flag === 1) {
//            myChart2.setOption(option11)
//        }
//        if (flag === 2) {
//            myChart2.setOption(option22)
//        }
//    }
//});


//if (option && typeof option === 'object') {
//    myChart.setOption(option);
//    myChart2.setOption(option);
//}

//window.addEventListener('resize', myChart.resize);
//window.addEventListener('resize', myChart2.resize);
option = {
  xAxis: {
    data: ['Animals', 'Fruits', 'Cars']
  },
  yAxis: {},
  dataGroupId: '',
  animationDurationUpdate: 500,
  series: {
    type: 'bar',
    id: 'sales',
    data: [
      {
        value: 5,
        groupId: 'animals'
      },
      {
        value: 2,
        groupId: 'fruits'
      },
      {
        value: 4,
        groupId: 'cars'
      }
    ],
    universalTransition: {
      enabled: true,
      divideShape: 'clone'
    }
  }
};
const drilldownData = [
  {
    dataGroupId: 'animals',
    data: [
      ['Cats', 4],
      ['Dogs', 2],
      ['Cows', 1],
      ['Sheep', 2],
      ['Pigs', 1]
    ]
  },
  {
    dataGroupId: 'fruits',
    data: [
      ['Apples', 4],
      ['Oranges', 2]
    ]
  },
  {
    dataGroupId: 'cars',
    data: [
      ['Toyota', 4],
      ['Opel', 2],
      ['Volkswagen', 2]
    ]
  }
];

const drilldownData2 = [
  {
    dataGroupId: 'Cats',
    data: [
    
      ['Dogs', 2],
      ['Cows', 1]
   
    ]
  } 
];
myChart.on('click', function (event) {
  if (event.data) {
  console.log(event.data.groupId)
   var subData=null;
   var flag ;
   if(event.data.groupId!='Cats') {
      subData = drilldownData.find(function (data) {
      return data.dataGroupId === event.data.groupId;
    });
     flag=1
   }
   else{
        subData = drilldownData2.find(function (data) {
      return data.dataGroupId === event.data.groupId;  });
          flag=2
   }
  
    if (!subData) {
      return;
    }
    if(  flag==1){
        option1 ={
      xAxis: {
        data: subData.data.map(function (item) {
          return item[0];
        })
      },
      series: {
        type: 'bar',
        id: 'sales',
        dataGroupId: subData.dataGroupId,
        data:  subData.data.map(function (item) {
      let h = new Object();
      h.groupId=item[0]
        h.value=item[1]
          return h;
        })
      //  subData.data.map(function (item) {
     //     return item[1];
      //  })
        ,
        universalTransition: {
          enabled: true,
          divideShape: 'clone'
        }
      },
      graphic: [
        {
          type: 'text',
          left: 50,
          top: 20,
          style: {
            text: 'Back',
            fontSize: 18
          },
          onclick: function () {
            myChart.setOption(option);
          }
        }
      ]
    }
    }
    
     if(  flag==2){
        option2 ={
      xAxis: {
        data: subData.data.map(function (item) {
          return item[0];
        })
      },
      series: {
        type: 'bar',
        id: 'sales',
        dataGroupId: subData.dataGroupId,
        data:  subData.data.map(function (item) {
      let h = new Object();
      h.groupId=item[0]
        h.value=item[1]
          return h;
        })
      //  subData.data.map(function (item) {
     //     return item[1];
      //  })
        ,
        universalTransition: {
          enabled: true,
          divideShape: 'clone'
        }
      },
      graphic: [
        {
          type: 'text',
          left: 50,
          top: 20,
          style: {
            text: 'Back',
            fontSize: 18
          },
          onclick: function () {
            myChart.setOption(option1);
          }
        }
      ]
    }
    }
    
 if(  flag==1){
    myChart.setOption(option1)}
    if(  flag==2){
    myChart.setOption(option2)}
  }
});
   HttpClient hc = new HttpClient();

            string url = "http://localhost:19461/WeatherForecast/receive";
            string path = @"C:\vm\unlocker-for-vmware-macos\backup\x64\vmware-vmx-debug.exe";
            var postContent = new MultipartFormDataContent();
            string boundary = string.Format("--{0}", DateTime.Now.Ticks.ToString("x"));
            postContent.Headers.Add("ContentType", $"multipart/form-data, boundary={boundary}");

            //if (files.Any())
            //{
            Stream stream = System.IO.File.Open(path, FileMode.Open);

            //files为文件key, files[0].FileName 为文件名称
            postContent.Add(new StreamContent(stream, (int)stream.Length), "files", "ElaneBoot.Schedule-master.7z");
                //Region为请求文件接口需要的参数，根据调用接口参数而定
                //postContent.Add(new StringContent(info.Region), "Region");

            //}
            var response = await hc.PostAsync(url, postContent);
            if (response.IsSuccessStatusCode)
            {
                //var responseStr = await response.Content.ReadAsStringAsync();
                //var responseObj = JsonConvert.DeserializeObject<WebApiResult>(responseStr);
                //return responseObj;
            }

  var body = Request.Body;

            var mediaType = MediaTypeHeaderValue.Parse(Request.ContentType);

            var boundary = mediaType.Parameters
                .SingleOrDefault(x =>
                    string.Equals(x.Name, "boundary", StringComparison.OrdinalIgnoreCase));

            // boundary を囲むダブル クォーテーションを除去する
            var reader = new MultipartReader(boundary.Value.Trim('"'), body);

             


            MultipartSection section = await reader.ReadNextSectionAsync();

            while (section != null)
            {
                bool hasContentDispositionHeader = ContentDispositionHeaderValue.TryParse(
                section.ContentDisposition, out ContentDispositionHeaderValue contentDisposition);

                if (hasContentDispositionHeader)
                {
                    using (var fileStream = System.IO.File.Create(@"c:\test\kk"))
                    {

                        section.Body.CopyToAsync(fileStream).Wait();

                    }
                }

                section = await reader.ReadNextSectionAsync();
            }
https://cloudaffaire.com/azure/update-2-asp-net-core-web-api-upload-and-download-file-stream-exception/
ASPxComboBox combo2 = ((ASPxComboBox)grid.FindEditRowCellTemplateControl(
                grid.Columns["Category2ID"] as GridViewDataComboBoxColumn, "Cat2"));

function getBroswer(){
    var Sys = {};
    var ua = navigator.userAgent.toLowerCase();
    var s;
    (s = ua.match(/edge\/([\d.]+)/)) ? Sys.edge = s[1] :
    (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? Sys.ie = s[1] :
    (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] :
    (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] :
    (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] :
    (s = ua.match(/opera.([\d.]+)/)) ? Sys.opera = s[1] :
    (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;

    if (Sys.edge) return { broswer : "Edge", version : Sys.edge };
    if (Sys.ie) return { broswer : "IE", version : Sys.ie };
    if (Sys.firefox) return { broswer : "Firefox", version : Sys.firefox };
    if (Sys.chrome) return { broswer : "Chrome", version : Sys.chrome };
    if (Sys.opera) return { broswer : "Opera", version : Sys.opera };
    if (Sys.safari) return { broswer : "Safari", version : Sys.safari };
    
    return { broswer : "", version : "0" };
}
var abc = getBroswer();
alert("broswer:"+abc.broswer+" version:"+abc.version);
  var duplicates1 = GetTable().AsEnumerable().Where(g => g["Name"].ToString().Length > 2)
               .Select(g => g["Index"].ToString()).ToList();

https://www.aspsnippets.com/Articles/Using-jQuery-UI-Dialog-Modal-Popup-with-ASPNet-AJAX-UpdatePanel.aspx

var duplicates = GetTable().AsEnumerable()
                .GroupBy(i => new { Name = i.Field<string>("Name"), Subject = i.Field<string>("Subject") })
                .Where(g => g.Count() > 1)
                .Select(g => new { g.Key.Name, g.Key.Subject, 
                    Values = string.Join(",",g.SelectMany(i => i["Index"].ToString()).Distinct().ToList()) }).ToList();

  <asp:AsyncPostBackTrigger ControlID="ddlFruits" EventName="SelectedIndexChanged" />
<%@ Page Language="C#" AutoEventWireup="True" CodeBehind="WebForm4.aspx.cs" Inherits="WebApplication2.WebForm4" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
      <script src="./js1/jquery-2.2.4.min.js"></script>
     <script type="text/javascript" src='https://ajax.​aspnetcdn.com/ajax/jquery.ui/1.8.22/jquery-ui.js'></script>
 <%--   <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.10/themes/redmond/jquery-ui.css">--%>
   <%-- <link rel="stylesheet" href="./css1/ui.jqgrid.css">--%>
   <%-- <link rel="stylesheet" href="./css1/bootstrap.min.css">
    <link rel="stylesheet" href="./css1/bootstrap-datetimepicker.min.css">--%>


    <%--  <script src="./js1/jquery-ui.min.js"></script>
    <script src="./js1/jquery-migrate-1.2.1.js"></script>
    <script src="./js1/bootstrap.min.js"></script>
    <script src="./js1/moment.min.js"></script>
    <script src="./js1/bootstrap-datetimepicker.min.js"></script>
    <script src="./js1/jquery.jqGrid.src.js"></script>--%>
     

    <title></title>
     <style type="text/css">
  /* .roundedBorders {  
    border-radius: 5px;  
    -moz-border-radius: 5px;  
    -khtml-border-radius: 5px;  
    -webkit-border-radius: 5px;  
    overflow: hidden !important;  
    overflow-x: hidden !important;  
    overflow-y: hidden !important;  */
 </style>
       <script type="text/javascript"> 
     
           $("#Button1").click(function () {
                window.parent.$("#export").dialog('close');
            });
       </script>
</head>
<body>
    <form id="form1" runat="server" >
             <asp:Button ID="Button1" runat="server" Text="Button" />
        <asp:ScriptManager ID="ScriptManager1" runat="server"></asp:ScriptManager>
 
      <asp:Label ID="Label7" runat="server" Text="上傳Excel檔Wafer ID Infomation："></asp:Label>
         <asp:FileUpload ID="fuExcel" runat="server" Width="70%" />
        <asp:Button ID="btnUploadExcel" runat="server" Text="Excel上傳" ToolTip="Excel上傳" OnClick="btnUploadExcel_Click" />
    
        <asp:UpdatePanel ID="UpdatePanel1" runat="server">
            <ContentTemplate>
          
            </ContentTemplate>
            <Triggers>
                <asp:PostBackTrigger ControlID="btnUploadExcel"></asp:PostBackTrigger>
            </Triggers>
        </asp:UpdatePanel>
    
   
     
      
    </form>
   
</body>
</html>
 


 
 
