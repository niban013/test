using Microsoft.Extensions.Diagnostics.HealthChecks;
using Serilog;
using WorkerService1;
Log.Logger = new LoggerConfiguration()

                .MinimumLevel.Debug()

                .MinimumLevel.Override("Microsoft", Serilog.Events.LogEventLevel.Warning)

                .Enrich.FromLogContext()

                .WriteTo.File(@"C:\a\test.txt")

                .CreateLogger();
IHost host = Host.CreateDefaultBuilder(args).UseWindowsService()
    .ConfigureServices(services =>
    {
        services.AddHostedService<Worker>();
        services.AddHealthChecks();//.AddCheck<DbHealthCheck>(nameof(DbHealthCheck));

        services.Configure<HealthCheckPublisherOptions>(options =>
        {
            // 初回の health check / publish  を起動から 5 秒遅延させる
            options.Delay = TimeSpan.FromSeconds(5);
            // 30 秒毎に health check / publish をする
            options.Period = TimeSpan.FromSeconds(30);
        });

    // HealthCheckPublisherOptions により定期的に health check が走り
    // その結果が IHealthCheckPublisher.PublishAsync(...) に渡される
    //services.AddSingleton<IHealthCheckPublisher, HealthCheckPublisher>();
    services.AddSingleton<IHealthCheckPublisher, DbHealthCheckPublisher>();// _ => new HealthCheckPublisher(coolAppOptions));
    }).UseSerilog()
    .Build();

host.Run();

https://blog.devart.com/how-to-implement-health-checks-in-asp-net-6.html
https://www.chaiandwine.info/2020/12/worker-service.html
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css" />

<script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
  <style type="text/css">
  .modal-dialog{
            height:100%
        }
        .modal-content{
            height:90%
        }
        .modal-body{
            height:100%;
            overflow:auto
        }
  #tblReportResultsDemographics tbody tr:nth-child(odd)  {

background: grey;  /*whatever color you want*/

}

#tblReportResultsDemographics tbody tr:nth-child(even)  {

background: white;  /*whatever color you want*/

}
 .right {
                text-align: right;
            }
 .center {
                text-align: center;
            }
  </style>

 

 <script> 
 $(document).ready(function(){
var aDemoItems = [
    {
        "patientId":"1",
        "otherId":"LanTest101",
        "firstName":"x1",
        "lastName":"yLanTest101",
        "gender":"M",
        "dob":"10/16/1941",
        "race":"Caucasian/White"
    },
     
    {
        "patientId":"2",
        "otherId":"LanTest102",
        "firstName":"x2",
        "lastName":"yLanTest102",
        "gender":"M",
        "dob":"08/10/2005",
        "race":"Caucasian/White"
    },
     
    {
        "patientId":"3",
        "otherId":"Test1111",
        "firstName":"x3",
        "lastName":"yTest1111",
        "gender":"M",
        "dob":"08/13/2015",
        "race":"Native Hawaian/Pacific Islander"
    },
]
 var jsonString = JSON.stringify(aDemoItems) //for testing

  var table = $('#example').DataTable({
    
         columnDefs: [
        { targets: [1, 2], className: "right" },
    ],
        "data" : aDemoItems,
        "columns" : [
            { "data" : "patientId"  },//className: "right"
            { "data" : "otherId" },
            { "data" : "firstName" },
            { "data" : "lastName" },
            { "data" : "gender" },
            { "data" : "dob" },
            { "data" : "race",
 'render': function (data, type, row, meta)
                             {
                                 return '<a>'+data+' </a>'
                             }
 },
        ]
    });
 $('#example').on('click', 'tbody tr td a', function () {
  var row = table.row($(this)).data();
alert('Row ' + $(this).closest("tr").index());
            alert('Column ' + $(this).closest("td").index());
  console.log(row);   //full row of array data
$('#myModal').modal('show');

});

});

 
</script>
</head>
<body>

<div class="container">
  <h2>Here is how to load a bootstrap modal as soon as the document is ready </h2>
  <!-- Trigger the modal with a button -->
 <table id="example" class="display" style="width:100%">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Office</th>
                <th>Age</th>
                <th>Start date</th>
                <th>Salary</th>  <th>Salary</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>  <td></td>
            </tr>
   
        </tbody>
       
    </table>

  <!-- Modal -->
  <div class="modal" id="myModal" role="dialog">
     <div class="modal-dialog modal-fullscreen" style="width: 100%;">
    
      <!-- Modal content-->
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">&times;</button>
          <h4 class="modal-title">Modal Header</h4>
        </div>
        <div class="modal-body">
         
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
      
    </div>
  </div>
  
</div>

<script>
$(document).ready(function(){
  // $("#myModal").modal();
});
</script>

</body>
</html>

using Microsoft.Extensions.DependencyInjection;
using System.Net.Sockets;
using tool;
using static tool.Helper;
https://neilmenon.com/blog/angular-rxjs-limit-concurrent-http-requests/
try
{
    HttpClientHandler httpClientHandler = new HttpClientHandler()
    {
        ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }

    };






    //var f = new ServiceCollection()
    //              .AddHttpClient()
    //              .BuildServiceProvider();
    //ServiceProvider serviceProvider = new ServiceCollection().AddHttpClient("zhihu", client => {
    //    //todo
    //});
    //var httpClientFactory = serviceProvider.GetService<IHttpClientFactory>();

    //var httpClient = httpClientFactory.CreateClient("zhihu");

    //var httpClientFactory = serviceProvider.GetService<IHttpClientFactory>();
    //var httpClient = httpClientFactory.CreateClient("zhihu");
    //var httpClient = new ServiceCollection()
    //              .BuildServiceProvider()
    //              .GetService<IHttpClientFactory>()
    //              .CreateClient();

    var serviceCollection = new ServiceCollection();

    serviceCollection.AddHttpClient("RoundRobinClient")
        .ConfigurePrimaryHttpMessageHandler(() => RoundRobinSocketHttpHandlerFactory.Create());
    // .BuildServiceProvider();
    //.GetService<IHttpClientFactory>()
    //.CreateClient();

    var provider = serviceCollection.BuildServiceProvider();

    HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "https://thetestdata.com/samplefiles/zip/Thetestdata_ZIP_0KB.zip");
   var httpClient = provider.GetService<IHttpClientFactory>().CreateClient();

    var res = await Helper.SendAsyncWithTimeout(httpClient, request);
    using (Stream stream = await res.Content.ReadAsStreamAsync().ConfigureAwait(false))
    {
    
        using (FileStream fileStream = new FileStream(@"C:\vm1\Thetestdata_ZIP_0KB.zip", FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }
    }

}
catch(Exception ex)
{


}

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace tool
{
    public class Helper 
    {
        public static class RoundRobinSocketHttpHandlerFactory
        {
            public static SocketsHttpHandler Create()
            {
                var handler = new SocketsHttpHandler()
                {
                    ConnectTimeout = TimeSpan.FromSeconds(10),
                };

                handler.ConnectCallback = async (context, cancellationToken) =>
                {
                    var socket = new Socket(SocketType.Stream, ProtocolType.Tcp);

                    try
                    {
                        socket.NoDelay = true;

                        // 这里可以自己偷偷改掉域名哦，也就是将原本请求的域名修改为一个奇怪的域名。这里偷偷改了，团队的其他伙伴可是很难调试出来的哦
                        await socket.ConnectAsync(context.DnsEndPoint, cancellationToken)
                        // 配置异步等待后不需要回到原来的线程
                        .ConfigureAwait(false);

                        // 发送的超时时间，相当于请求的超时
                        socket.SendTimeout = (int)TimeSpan.FromSeconds(10).TotalMilliseconds;
                        // 接收的超时时间，相当于响应的超时
                        socket.ReceiveTimeout = (int)TimeSpan.FromSeconds(5).TotalMilliseconds;
                    }
                    catch
                    {
                        socket.Dispose();
                        throw;
                    }

                    // 在 NetworkStream 里，设置 ownsSocket 参数为 true 将会在 NetworkStream 被释放的时候，自动释放 Socket 资源
                    return new NetworkStream(socket, ownsSocket: true);
                };

                return handler;
            }
        }
        public static async Task<HttpResponseMessage> SendAsyncWithTimeout(HttpClient _httpClient,HttpRequestMessage requestMessage, CancellationToken cancellationToken = default)
        {
            var timoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            //var timoutCts = new CancellationTokenSource(10000);
            var aggregateCts = CancellationTokenSource.CreateLinkedTokenSource(timoutCts.Token, cancellationToken);

            try
            {
                return await _httpClient.SendAsync(requestMessage, HttpCompletionOption.ResponseHeadersRead,aggregateCts.Token)
                    .ConfigureAwait(false);
            }
            catch (TaskCanceledException) when (timoutCts.IsCancellationRequested)
            {
                throw new TimeoutException("HTTP request timed out.");
            }
        }
    }
  
}


cccccccccccccc

https://github.com/dotnet/runtime/issues/31259


using Microsoft.Extensions.DependencyInjection;
using System.Net.Sockets;
using tool;

try
{
    var handler = new SocketsHttpHandler()
    {
        ConnectTimeout = TimeSpan.FromSeconds(10),
    };

    handler.ConnectCallback = async (context, cancellationToken) =>
    {
        var socket = new Socket(SocketType.Stream, ProtocolType.Tcp);

        try
        {
            socket.NoDelay = true;

            // 这里可以自己偷偷改掉域名哦，也就是将原本请求的域名修改为一个奇怪的域名。这里偷偷改了，团队的其他伙伴可是很难调试出来的哦
            await socket.ConnectAsync(context.DnsEndPoint, cancellationToken)
            // 配置异步等待后不需要回到原来的线程
            .ConfigureAwait(false);

            // 发送的超时时间，相当于请求的超时
            socket.SendTimeout = (int)TimeSpan.FromSeconds(10).TotalMilliseconds;
            // 接收的超时时间，相当于响应的超时
            socket.ReceiveTimeout = (int)TimeSpan.FromSeconds(5).TotalMilliseconds;
        }
        catch
        {
            socket.Dispose();
            throw;
        }

        // 在 NetworkStream 里，设置 ownsSocket 参数为 true 将会在 NetworkStream 被释放的时候，自动释放 Socket 资源
        return new NetworkStream(socket, ownsSocket: true);
    };

    //var f = new ServiceCollection()
    //              .AddHttpClient()
    //              .BuildServiceProvider();
    //ServiceProvider serviceProvider = new ServiceCollection().AddHttpClient("zhihu", client => {
    //    //todo
    //});
    //var httpClientFactory = serviceProvider.GetService<IHttpClientFactory>();

    //var httpClient = httpClientFactory.CreateClient("zhihu");
    var serviceProvider = new ServiceCollection().AddHttpClient("zhihu", client => {
        //todo
    });
    var httpClientFactory = serviceProvider.GetService<IHttpClientFactory>();
    var httpClient = httpClientFactory.CreateClient("zhihu");
    var httpClient = new ServiceCollection()
                  .BuildServiceProvider()
                  .GetService<IHttpClientFactory>()
                  .CreateClient();
    HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "https://thetestdata.com/samplefiles/zip/Thetestdata_ZIP_0KB.zip");

    var res = await Helper.SendAsyncWithTimeout(httpClient., request);
    using (Stream stream = await res.Content.ReadAsStreamAsync().ConfigureAwait(false))
    {
        s 
        using (FileStream fileStream = new FileStream(@"C:\vm1\Thetestdata_ZIP_0KB.zip", FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }
    }

}
catch(Exception ex)
{


}
 using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace tool
{
    public class Helper 
    { 
        public static async Task<HttpResponseMessage> SendAsyncWithTimeout(HttpClient _httpClient,HttpRequestMessage requestMessage, CancellationToken cancellationToken = default)
        {
            var timoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            //var timoutCts = new CancellationTokenSource(10000);
            var aggregateCts = CancellationTokenSource.CreateLinkedTokenSource(timoutCts.Token, cancellationToken);

            try
            {
                return await _httpClient.SendAsync(requestMessage, HttpCompletionOption.ResponseHeadersRead,aggregateCts.Token)
                    .ConfigureAwait(false);
            }
            catch (TaskCanceledException) when (timoutCts.IsCancellationRequested)
            {
                throw new TimeoutException("HTTP request timed out.");
            }
        }
    }
  
}

https://zhuanlan.zhihu.com/p/89106847
<!DOCTYPE html>
<html data-bs-theme="dark">
   <head>
      <title>Try v1.2 Bootstrap Online</title>
      <link href="https://www.tutorialspoint.com/bootstrap/css/bootstrap.min.css" rel="stylesheet">
      <script src="https://www.tutorialspoint.com/bootstrap/scripts/jquery.min.js"></script>
      <script src="https://www.tutorialspoint.com/bootstrap/js/bootstrap.min.js"></script>
    <style>

 /* automatic/manual light mode */
:root, :root.light {
  --some-value: black;
  --some-other-value: white;
}

/* automatic dark mode */
/* ❗️ keep the rules in sync with the manual dark mode below! */
@media (prefers-color-scheme: dark) {
  :root {
    --some-value: white;
    --some-other-value: black;
  }
}

/* manual dark mode 
/* ❗️ keep the rules in sync with the automatic dark mode above! */
:root.dark {
  --some-value: white;
  --some-other-value: black;
}

/* use the variables */
body {
  color: var(--some-value);
  background-color: var(--some-other-value);
}
 .panel-body{
        background-color: #1B1B1B;
        color: #E7E8EB;
      }
    }
  </style>
 
</head>
   <body>
<button onClick="toggleDarkMode()">Toggle</button>
<h1>Hello world!</h1>

      <div class="panel panel-primary">
         <div class="panel-heading">
            <h3 class="panel-title">Panel title</h3>
         </div>
         <div class="panel-body">
            This is a Basic panel
   This is a Basic panel</br>
     This is a Basic panel</br>
   This is a Basic panel</br>
         </div>
      </div>
      <div class="panel panel-success">
         <div class="panel-heading">
            <h3 class="panel-title">Panel title</h3>
         </div>
         <div class="panel-body">
            This is a Basic panel
         </div>
      </div>
      <div class="panel panel-info">
         <div class="panel-heading">
            <h3 class="panel-title">Panel title</h3>
         </div>
         <div class="panel-body">
            This is a Basic panel
         </div>
      </div>
      <div class="panel panel-warning">
         <div class="panel-heading">
            <h3 class="panel-title">Panel title</h3>
         </div>
         <div class="panel-body">
            This is a Basic panel
         </div>
      </div>
      <div class="panel panel-danger">
         <div class="panel-heading">
            <h3 class="panel-title">Panel title</h3>
         </div>
         <div class="panel-body">
            This is a Basic panel
         </div>
      </div> 
<script>
function toggleDarkMode() {
  if (document.documentElement.classList.contains("light")) {
    document.documentElement.classList.remove("light")
    document.documentElement.classList.add("dark")
  } else if (document.documentElement.classList.contains("dark")) {
    document.documentElement.classList.remove("dark")
    document.documentElement.classList.add("light")
  } else {
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      document.documentElement.classList.add("dark")
    } else {
      document.documentElement.classList.add("light")
    }
  }
}
</script>
   </body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css" />

<script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
  <style type="text/css">
  .modal-dialog{
            height:100%
        }
        .modal-content{
            height:90%
        }
        .modal-body{
            height:100%;
            overflow:auto
        }
  #tblReportResultsDemographics tbody tr:nth-child(odd)  {

background: grey;  /*whatever color you want*/

}

#tblReportResultsDemographics tbody tr:nth-child(even)  {

background: white;  /*whatever color you want*/

}
 .right {
                text-align: right;
            }
 .center {
                text-align: center;
            }
  </style>

 

 <script> 
 $(document).ready(function(){
var aDemoItems = [
    {
        "patientId":"1",
        "otherId":"LanTest101",
        "firstName":"x1",
        "lastName":"yLanTest101",
        "gender":"M",
        "dob":"10/16/1941",
        "race":"Caucasian/White"
    },
     
    {
        "patientId":"2",
        "otherId":"LanTest102",
        "firstName":"x2",
        "lastName":"yLanTest102",
        "gender":"M",
        "dob":"08/10/2005",
        "race":"Caucasian/White"
    },
     
    {
        "patientId":"3",
        "otherId":"Test1111",
        "firstName":"x3",
        "lastName":"yTest1111",
        "gender":"M",
        "dob":"08/13/2015",
        "race":"Native Hawaian/Pacific Islander"
    },
]
 var jsonString = JSON.stringify(aDemoItems) //for testing
 var oTblReport = $("#tblReportResultsDemographics")
 
    oTblReport.DataTable ({
         columnDefs: [
        { targets: [1, 2], className: "right" },
    ],
        "data" : aDemoItems,
        "columns" : [
            { "data" : "patientId"  },//className: "right"
            { "data" : "otherId" },
            { "data" : "firstName" },
            { "data" : "lastName" },
            { "data" : "gender" },
            { "data" : "dob" },
            { "data" : "race" },
        ]
    });
   $("#myModal").modal();
});</script>
</head>
<body>

<div class="container">
  <h2>Here is how to load a bootstrap modal as soon as the document is ready </h2>
  <!-- Trigger the modal with a button -->


  <!-- Modal -->
  <div class="modal" id="myModal" role="dialog">
     <div class="modal-dialog modal-fullscreen" style="width: 100%;">
    
      <!-- Modal content-->
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">&times;</button>
          <h4 class="modal-title">Modal Header</h4>
        </div>
        <div class="modal-body">
         <table border="1" id="tblReportResultsDemographics" class="display nowrap cell-border" width="100%">

	 <thead>
    <tr>
      <th class="center">patientId</th>
      <th>otherId</th>
 <th>firstName</th>
      <th>lastName</th>
 <th>gender</th>
      <th>dob</th>
  <th>race</th>
    </tr>
   	 </thead>
   <tbody>
    <tr>
      <td>Row 1 Data 1</td>
      <td>Row 1 Data 2</td>
 <td>Row 1 Data 1</td>
      <td>Row 1 Data 2</td>
 <td>Row 1 Data 1</td>
      <td>Row 1 Data 2</td>
 <td>Row 1 Data 1</td>
    </tr>
    
  </tbody>
</table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
      
    </div>
  </div>
  
</div>

<script>
$(document).ready(function(){
   $("#myModal").modal();
});
</script>

</body>
</html>https://www.yogihosting.com/kubernetes-ingress-aspnet-core/
https://lanxuexing.github.io/2020/05/03/ng-file-upload/
https://github.com/TharakaMadhusanka/Angular-Bulk-File-Upload/tree/main
https://nemi-chand.github.io/multiple-file-upload-in-angular-using-aspnet-core/

using Quartz.Impl;
using Quartz;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace task
{
    //    public static class QuartzConfig
    //    {
    //        //調度器工廠
    //        private static ISchedulerFactory? schedulerFactory;
    //        //調度器
    //        private static IScheduler? scheduler;

    //        public static ITrigger trigger(string type, string title, string groups = "on", string time = "5")
    //        {
    //            //3、創建一個觸發器(有4種觸發器供選擇)
    //            //重複執行：WithRepeatCount(count) / RepeatForever(count)
    //            //間格時間：WithInterval(time)
    //            //定時執行：StartAt() / StartNow()
    //            //設定優先：WithPriority()，default 5

    //            ITrigger trigger;
    //            switch (type)
    //            {
    //                case "Simple":
    //                    #region 觸發器1：WithSimpleSchedule 
    //                    trigger = TriggerBuilder.Create()
    //                        .WithIdentity(title, groups)
    //                        .WithSimpleSchedule(x => x.WithIntervalInSeconds(int.Parse(time)).RepeatForever())
    //                        .Build();
    //                    #endregion
    //                    break;
    //                case "Daily":
    //                    #region 觸發器2：WithDailyTimeIntervalSchedule
    //                    trigger = TriggerBuilder.Create()
    //                        .WithIdentity(title, groups)
    //                        .WithDailyTimeIntervalSchedule(x => x.OnEveryDay().WithIntervalInSeconds(int.Parse(time)))
    //                        .Build();
    //                    #endregion
    //                    break;
    //                case "Calendar":
    //                    #region 觸發器3：WithCalendarIntervalSchedule
    //                    trigger = TriggerBuilder.Create()
    //                        .WithIdentity(title, groups)
    //                        .WithCalendarIntervalSchedule(x => x.WithIntervalInSeconds(int.Parse(time)))
    //                        .Build();
    //                    #endregion
    //                    break;
    //                case "Cron":
    //                default:
    //                    #region 觸發器4：WithCronSchedule()
    //                    trigger = TriggerBuilder.Create()
    //                        .WithIdentity(title, groups)
    //                        .WithCronSchedule(time)
    //                        .Build();
    //                    #endregion
    //                    break;
    //            }
    //            return trigger;
    //        }

    //        public static async void Run(IJobDetail job, ITrigger trigger)
    //        {
    //            //1、創建一個調度器
    //            schedulerFactory = new StdSchedulerFactory();
    //            scheduler = await schedulerFactory.GetScheduler();
    //            await scheduler.Start();

    //            JobKey jobKey = new JobKey(job.Key.Name, job.Key.Group);
    //            TriggerKey triggerKey = new TriggerKey(trigger.Key.Name, trigger.Key.Group);

    //            bool exists = await scheduler.CheckExists(jobKey);
    //            if (!exists)
    //            {
    //                // 該工作還沒有執行
    //                //4、將任務與觸發器添加到調度器中
    //                await scheduler.ScheduleJob(job, trigger);
    //            }
    //            //5、開始執行
    //            await scheduler.Start();
    //        }

    //        public static void Shutdown()
    //        {
    //            if (scheduler != null)
    //            {
    //                scheduler.Shutdown(true);
    //            }
    //        }
    //    }
    //}
    public class QuartzHelper
    {
        public static readonly IScheduler _scheduler;
        static QuartzHelper()
        {
            //创建一个工厂
            var schedulerFactory = new StdSchedulerFactory();
            //启动
            _scheduler = schedulerFactory.GetScheduler().Result;
            //1、开启调度
            _scheduler.Start();
        }
        /// <summary>
        /// 时间间隔执行任务
        /// </summary>
        /// <typeparam name="T">任务类，必须实现IJob接口</typeparam>
        /// <param name="seconds">时间间隔(单位：秒)</param>
        public static async Task<bool> ExecuteInterval<T>(int seconds) where T : IJob
        {
            //2、创建工作任务
            IJobDetail job = JobBuilder.Create<T>().WithIdentity("p1","p2").WithDescription("Say hello to Tom job")
.Build();
            // 3、创建触发器
            ITrigger trigger = TriggerBuilder.Create()
           .StartNow()
           .WithSimpleSchedule(
                               x => x.WithIntervalInSeconds(seconds)
           //x.WithIntervalInMinutes(1)
           .RepeatForever())
           .Build();
            _scheduler.ListenerManager.AddJobListener(new TestJobListener());
            //4、将任务加入到任务池
            await _scheduler.ScheduleJob(job, trigger);
            return true;
        }

        /// <summary>
        /// 指定时间执行任务
        /// </summary>
        /// <typeparam name="T">任务类，必须实现IJob接口</typeparam>
        /// <param name="cronExpression">cron表达式，即指定时间点的表达式</param>
        public static async Task<bool> ExecuteByCron<T>(string cronExpression) where T : IJob
        {
            //2、创建工作任务
            IJobDetail job = JobBuilder.Create<T>().Build();
            //3、创建触发器
            ICronTrigger trigger = (ICronTrigger)TriggerBuilder.Create()
           .StartNow()
           .WithCronSchedule(cronExpression)
           .Build();
            //4、将任务加入到任务池
            await _scheduler.ScheduleJob(job, trigger);
            return true;
        }
    }
}
using Quartz;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace task
{
    public class TestJobListener : IJobListener
    {
        //任务监听类的名称标识
        public string Name => "TestJob";

        //任务被忽略
        //当任务上有 [DisallowConcurrentExecution] 标记时,
        //上一个周期结束时任务还没执行完，下一个周期时间到来了,
        //那么下个周期会被忽略，就会触发此事件
        public Task JobExecutionVetoed(
            IJobExecutionContext context,
            CancellationToken cancellationToken = default)
        {
            return Task.CompletedTask;
            //return Task.Run(() => { Console.WriteLine("此次任务被忽略..."); });
        }

        //任务执行前触发
        public Task JobToBeExecuted(
            IJobExecutionContext context,
            CancellationToken cancellationToken = default)
        {
            //if (true)
            //{
            //    return Task.FromResult(true);
            //}

            //return Task.FromResult(false);
            return Task.Run(() => { Console.WriteLine("任务即将被执行..."); });
        }

        //任务执行后触发
        public Task JobWasExecuted(
            IJobExecutionContext context,
            JobExecutionException jobException,
            CancellationToken cancellationToken = default)
        {
            return Task.CompletedTask;
            //return Task.Run(() => { Console.WriteLine("任务已经被执行完..."); });
        }
    }
    public class JobDemo : IJob
    {
        public Task Execute(IJobExecutionContext context)
        {
            return Task.Run(() =>
            {
                MessageBox.Show(DateTime.Now.ToString());
                Console.WriteLine($"111打印信息测试...， {DateTime.Now}");
            });
        }
    }
}
   private void button6_Click(object sender, EventArgs e)
   {
       //JobScheduler.Start();
       QuartzHelper.ExecuteInterval<JobDemo>(5).Wait();
   }

   private async void button7_Click(object sender, EventArgs e)
   {
       JobKey jobKey = new JobKey("p1", "p2");
       var b=QuartzHelper._scheduler.CheckExists(jobKey);
       if(!await QuartzHelper._scheduler.CheckExists(jobKey)) 
       {
           return;
       }
       await QuartzHelper._scheduler.Interrupt(jobKey);
       //QuartzHelper._scheduler.Shutdown();
       //JobScheduler.Stop();
   }



https://www.c-sharpcorner.com/article/azure-blob-storage-in-c-sharp/
https://blog.matrixpost.net/accessing-azure-storage-account-blobs-from-c-applications/
https://docubear.com/c-how-to-read-and-write-to-azure-blob-storage/
https://blog.christian-schou.dk/how-to-use-azure-blob-storage-with-asp-net-core/
public class AzureBlobStorageService
{
    private string connectionString = "YourStorageAccountConnectionString";
    private BlobServiceClient blobServiceClient;

    public AzureBlobStorageService()
    {
        blobServiceClient = new BlobServiceClient(connectionString);
    }
}
C#
Replace "YourStorageAccountConnectionString" with the connection string for your Azure Storage Account.

2. Creating a Blob Container
Now, let's create a container within the storage account.

public async Task CreateContainerAsync(string containerName)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
    await containerClient.CreateIfNotExistsAsync();
}
C#
3. Uploading a Blob
Here's an example of how you can upload a file (blob) to a container.

public async Task UploadBlobAsync(string containerName, string blobName, string filePath)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
    BlobClient blobClient = containerClient.GetBlobClient(blobName);

    using FileStream fs = File.OpenRead(filePath);
    await blobClient.UploadAsync(fs, true);
}
C#
4. Downloading a Blob
To retrieve a blob from the container, use the following method.

public async Task DownloadBlobAsync(string containerName, string blobName, string downloadPath)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
    BlobClient blobClient = containerClient.GetBlobClient(blobName);

    BlobDownloadInfo blobDownloadInfo = await blobClient.DownloadAsync();

    using FileStream fs = File.OpenWrite(downloadPath);
    await blobDownloadInfo.Content.CopyToAsync(fs);
}
C#
5. Listing Blobs in a Container
To list all the blobs within a container, you can use the following method.

public async Task<List<string>> ListBlobsAsync(string containerName)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
    var blobs = new List<string>();

    await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
    {
        blobs.Add(blobItem.Name);
    }

    return blobs;
}
C#
This snippet retrieves the names of all blobs within the specified container and returns a list of strings containing the blob names.

6. Deleting a Blob
To delete a specific blob from a container.

public async Task DeleteBlobAsync(string containerName, string blobName)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
    BlobClient blobClient = containerClient.GetBlobClient(blobName);

    await blobClient.DeleteIfExistsAsync();
}
C#
This method deletes the specified blob from the container.

7. Deleting a Container
To remove an entire container from the storage account.

public async Task DeleteContainerAsync(string containerName)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);

    await containerClient.DeleteIfExistsAsync();
}
C#
8. Accessing Blob Metadata
Fetching metadata associated with a specific blob.

public async Task<IDictionary<string, string>> GetBlobMetadataAsync(string containerName, string blobName)
{
    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
    BlobClient blobClient = containerClient.GetBlobClient(blobName);

    BlobProperties properties = await blobClient.GetPropertiesAsync();
    return properties.Metadata;
}



builder.Services.AddSingleton<IPolicyEvaluator, FakePolicyEvaluator>();
public class FakePolicyEvaluator : IPolicyEvaluator
    {
        public virtual async Task<AuthenticateResult> AuthenticateAsync(AuthorizationPolicy policy, HttpContext context)
        {
            var testScheme = "FakeScheme";
            var principal = new ClaimsPrincipal();
            principal.AddIdentity(new ClaimsIdentity(new[] {
            new Claim("Permission", "CanViewPage"),
            new Claim("Manager", "yes"),
            new Claim(ClaimTypes.Role, "Administrator"),
            new Claim(ClaimTypes.NameIdentifier, "John")
        }, testScheme));
            return await Task.FromResult(AuthenticateResult.Success(new AuthenticationTicket(principal,
                new AuthenticationProperties(), testScheme)));
        }

        public virtual async Task<PolicyAuthorizationResult> AuthorizeAsync(AuthorizationPolicy policy,
            AuthenticateResult authenticationResult, HttpContext context, object resource)
        {
            return await Task.FromResult(PolicyAuthorizationResult.Success());
        }
    }

https://blog.uwinfo.com.tw/auth/article/bike/484
function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  WinHttpReq: Variant;
  Connected: Boolean;
begin
  Connected := False;
  repeat
    Log('Checking connection to the server');
    try
      WinHttpReq := CreateOleObject('WinHttp.WinHttpRequest.5.1');
      { Use your real server host name }
      WinHttpReq.Open('GET', 'https://www1.example.com/', False);
      WinHttpReq.Send('');
      Log('Connected to the server; status: ' + IntToStr(WinHttpReq.Status) + ' ' +
          WinHttpReq.StatusText);
      Connected := True;
    except
      Log('Error connecting to the server: ' + GetExceptionMessage);
      if WizardSilent then
      begin
        Log('Connection to the server is not available, aborting silent installation');
         Result := 'Prerequisites test failed';
        Exit;
      end
        else
      if MsgBox('Cannot reach server. Please check your Internet connection.',
                mbError, MB_RETRYCANCEL) = IDRETRY then
      begin
        Log('Retrying');
      end
        else
      begin
        Log('Aborting');
       Result := 'Prerequisites test failed';
        Exit;
      end;
    end;
  until Connected;

  Result := '';
end;
https://www.twblogs.net/a/5f01f0040b1faa371958e196
https://stackblitz.com/edit/angular-setinterval-templateside-lckduc?file=app%2Fapp.component.ts
\\https://azisava.sakura.ne.jp/programming/0022.html
 public static class MultipartRequestManager
 {const animals = "/19/18/a.png".split("/");
console.log(animals.slice(0, -1).join("/"));
     // get the boundary information, for above exmaple would be: --------------------------156313382635509050530525
     public static string GetBoundary(MediaTypeHeaderValue contentType)
     {
         var boundary = HeaderUtilities.RemoveQuotes(contentType.Boundary).Value;

         if (string.IsNullOrWhiteSpace(boundary))
         {
             throw new InvalidDataException("Missing content-type boundary.");
         }
         return boundary;
     }

     // validate if it was multipart form data
     public static bool IsMultipartContentType(string contentType)
     {
         return !string.IsNullOrEmpty(contentType)
                && contentType.IndexOf("multipart/", StringComparison.OrdinalIgnoreCase) >= 0;
     }

     public static bool HasFormDataContentDisposition(ContentDispositionHeaderValue contentDisposition)
     {
         //  for exmaple, Content-Disposition: form-data; name="subdirectory";
         return contentDisposition != null
             && contentDisposition.DispositionType.Equals("form-data")
             && string.IsNullOrEmpty(contentDisposition.FileName.Value)
             && string.IsNullOrEmpty(contentDisposition.FileNameStar.Value);
     }

     public static bool HasFileContentDisposition(ContentDispositionHeaderValue contentDisposition)
     {
         // for example, Content-Disposition: form-data; name="files"; filename="OnScreenControl_7.58.zip"
         // ...
         return contentDisposition != null
             && contentDisposition.DispositionType.Equals("form-data")
             && (!string.IsNullOrEmpty(contentDisposition.FileName.Value)
                 || !string.IsNullOrEmpty(contentDisposition.FileNameStar.Value));
     }
 }

 // we disable automatic model binding for MVC default behavior than to the access streaming directly 
 [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
 public class DisableFormValueModelBindingAttribute : Attribute, IResourceFilter
 {
     public void OnResourceExecuting(ResourceExecutingContext context)
     {
         var factories = context.ValueProviderFactories;
         factories.RemoveType<FormValueProviderFactory>();
         factories.RemoveType<JQueryFormValueProviderFactory>();
     }

     public void OnResourceExecuted(ResourceExecutedContext context)
     {
     }
 }

try
{
    if (!MultipartRequestManager.IsMultipartContentType(Request.ContentType))
    {
        throw new FormatException("Form without multipart content.");
    }

    var subDirectory = string.Empty;
    var count = 0;
    var totalSize = 0L;
    // find the boundary

    var boundary = MultipartRequestManager.GetBoundary(MediaTypeHeaderValue.Parse(Request.ContentType));
    // use boundary to iterator through the multipart section
    var reader = new MultipartReader(boundary, HttpContext.Request.Body);

    var section = await reader.ReadNextSectionAsync();
    do
    {
        ContentDispositionHeaderValue.TryParse(section.ContentDisposition, out var contentDisposition);
        if (!MultipartRequestManager.HasFileContentDisposition(contentDisposition))
        {
            if (MultipartRequestManager.HasFormDataContentDisposition(contentDisposition) && contentDisposition.Name == nameof(subDirectory))
            {
                using var streamReader = new StreamReader(section.Body, Encoding.UTF8);
                // get the subdirectory first
                subDirectory = streamReader.ReadToEnd();
            }

            section = await reader.ReadNextSectionAsync();
            continue;
        }
        totalSize += await SaveFileAsync(section, subDirectory);

        count++;
        section = await reader.ReadNextSectionAsync();
    } while (section != null);

    return Ok(new { Count = count, Size = SizeConverter(totalSize) });

}
catch (Exception exception)
{
    return BadRequest($"Error: {exception.Message}");
}
  HttpClient http = new HttpClient();
  http.BaseAddress = new Uri("http://localhost:5020");
  //http.DefaultRequestHeaders.Add("Authorization", @"Basic xxxxxxxx"); // 基本認證機制

  //## 用 Multipart-FormData 封包傳送
  string boundary = string.Format("----WebKitFormBoundary{0}", DateTime.Now.Ticks.ToString("x"));
  MultipartFormDataContent formData = new MultipartFormDataContent(boundary);

  //MultipartFormDataContent formData = new MultipartFormDataContent();
  //formData.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");
  // 封裝[req]資訊 <--- 以JSON包裝資訊
  formData.Add(new StringContent(JsonConvert.SerializeObject("test")), "req");

  // 封裝檔案 <--- 以Stream包裝附件檔案
  //foreach (var c in streamList)
  //{
  FileStream fStream = System.IO.File.Open(@"C:\vm\update\testAddIis.exe", FileMode.Open, FileAccess.Read);
  formData.Add(new StreamContent(fStream, (int)fStream.Length), "file", "testAddIis.exe");
  //formData.Add(new StreamContent(File.OpenRead(@"C:\vm\update\testAddIis.exe")), "files", "testAddIis.exe");
 
  //}

  HttpResponseMessage response = http.PostAsync("/WeatherForecast/uploadlarge", formData).Result;
  if (!response.IsSuccessStatusCode)
      throw new HttpRequestException(response.Content.ReadAsStringAsync().Result);

  // success
  var resp = response.Content.ReadAsStringAsync().Result;


const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric' , minute: 'numeric', second: 'numeric',hour12: false};
var date = file.lastModifiedDate.toLocaleString('zh-TW', options)
   public List<string> GetFiles(string path)
 {
     List<string> rs = new List<string>();

     ProcessFiles(rs, path);

     return rs;
 }
 void ProcessFiles(List<string> rs,string path)

private  void xx(HttpClient httpClient,int i) 
  {#define MyAppPackPath SourcePath + "\..\images"
      //make the sync GET request
      using (var request = new HttpRequestMessage(HttpMethod.Get, "https://getsamplefiles.com/download/zip/sample-3.zip"))
      {
          using (var response = httpClient.Send(request, HttpCompletionOption.ResponseHeadersRead))
          {
              if (response.IsSuccessStatusCode)
              {
                  var stream = response.Content.ReadAsStreamAsync().ConfigureAwait(false).GetAwaiter().GetResult();
                 // var fileinfo = new FileInfo(@$"C:\vm\c{i}.zip");
                  //using (var fileStream = fileinfo.OpenWrite())
                  using (FileStream fileStream = new FileStream(@$"C:\vm\c{i}.zip", FileMode.Create, FileAccess.Write, FileShare.None, bufferSize: 81920, useAsync: true))
                  //stream.CopyTo(fileStream);
                  {  
                      byte[] buffer = new byte[8 * 1024];
                      int len;
                      while ((len = stream.Read(buffer, 0, buffer.Length)) > 0)
                      {
                          fileStream.Write(buffer, 0, len);
                      }
                  }
              }
              else
              {
                  //  throw new exception("file not found");
              }
          }
          GC.Collect();
      }
  }





using Downloader;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Numerics;
using System.Reflection.Emit;

var downloadOpt = new DownloadConfiguration()
{
    // usually, hosts support max to 8000 bytes, default values is 8000
    BufferBlockSize = 10240,
    // file parts to download, default value is 1
    ChunkCount = 8,
    // download speed limited to 2MB/s, default values is zero or unlimited
    MaximumBytesPerSecond = 1024 * 1024 * 2,
    // the maximum number of times to fail
    MaxTryAgainOnFailover = 5,
    // release memory buffer after each 50 MB
    MaximumMemoryBufferBytes = 1024 * 1024 * 50,
    // download parts of file as parallel or not. Default value is false
    ParallelDownload = true,
    // number of parallel downloads. The default value is the same as the chunk count
    ParallelCount = 4,
    // timeout (millisecond) per stream block reader, default values is 1000
    Timeout = 1000,
    // set true if you want to download just a specific range of bytes of a large file
    RangeDownload = false,
    // floor offset of download range of a large file
    RangeLow = 0,
    // ceiling offset of download range of a large file
    RangeHigh = 0,
    // clear package chunks data when download completed with failure, default value is false
    ClearPackageOnCompletionWithFailure = true,
    // minimum size of chunking to download a file in multiple parts, default value is 512
    MinimumSizeOfChunking = 1024,
    // Before starting the download, reserve the storage space of the file as file size, default value is false
    ReserveStorageSpaceBeforeStartingDownload = true,
    // config and customize request headers
    //RequestConfiguration =
    //{
    //    Accept = "*/*",
    //   // CookieContainer = cookies,
    //    Headers = new WebHeaderCollection(), // { your custom headers }
    //    KeepAlive = true, // default value is false
    //    ProtocolVersion = HttpVersion.Version11, // default value is HTTP 1.1
    //    UseDefaultCredentials = false,
    //    // your custom user agent or your_app_name/app_version.
    //    UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    //    Proxy = new WebProxy()
    //    {
    //        Address = new Uri("http://YourProxyServer/proxy.pac"),
    //        UseDefaultCredentials = false,
    //        Credentials = System.Net.CredentialCache.DefaultNetworkCredentials,
    //        BypassProxyOnLocal = true
    //    }
    //}
};
var downloader = new DownloadService(downloadOpt);
downloader.DownloadStarted += DownloadStarted;
downloader.DownloadFileCompleted += DownloadFileCompleted;
downloader.DownloadProgressChanged += DownloadProgressChanged;
Console.Write("Hello : ");
//for (int k = 0; k <= 100; k++)
//{
//    Console.SetCursorPosition(80, 0);
//    Console.Write("{0}%", k);
//    System.Threading.Thread.Sleep(50);
//}

await downloader.DownloadFileTaskAsync(@"https://files.testfile.org/PDF/10MB-TESTFILE.ORG.pdf", @"C:\vm\c.pdf");
Console.WriteLine();
await downloader.DownloadFileTaskAsync(@"https://files.testfile.org/PDF/10MB-TESTFILE.ORG.pdf", @"C:\vm\c2.pdf");


void DownloadStarted(object? sender, DownloadStartedEventArgs e)
{
    Trace.WriteLine(
        $"图片, FileName:{Path.GetFileName(e.FileName)}, TotalBytesToReceive:{e.TotalBytesToReceive}");
}

void DownloadFileCompleted(object? sender, AsyncCompletedEventArgs e)
{
    //Trace.WriteLine($"下载完成, filepath:{filepath}");
    // percentageBar.Dispose();
}
int left = Console.CursorLeft;
    int top = Console.CursorTop;
void DownloadProgressChanged(object? sender, Downloader.DownloadProgressChangedEventArgs e)
{
    int maxValue = 10000;    // 表示數值最大值
    int factor = 2;          // 表示 ProgressBar 每格 % 數
    int process = (int)(((float)(int)(e.ProgressPercentage * 1) / maxValue) * 100 / factor);
    //this.BeginInvoke((Action)(() =>
    //{
    //    label1.Text = ((int)(e.ProgressPercentage * 100)).ToString();
    //}));
    //Console.SetCursorPosition(left, top);
    //Console.WriteLine("\n ****** ConsoleApp ProgressBar Style 2 ... ****** ");
    //ProgressBarStyle2(process);
    //ShowProgressBar((int)(e.ProgressPercentage * 1), 100); Thread.Sleep(500);
    Console.Write("\rDownloaded Percentage: {0}", ((int)(e.ProgressPercentage * 1)).ToString());
    //Console.WriteLine(((int)(e.ProgressPercentage * 1)).ToString());
    //ConsoleProgress.Tick((int)(e.ProgressPercentage * 100));
    //if (sender is DownloadService ds)
    //    e.UpdateTitleInfo(ds.IsPaused);
    //  percentageBar.AsProgress<double>().Report(e.ProgressPercentage);
}

static void ProgressBarStyle2(int percent)
{
    int factor = 2;          // 表示 ProgressBar 每格 % 數

    Console.Write("|");
    for (int i = 1; i <= percent; i++)
    {
        Console.BackgroundColor = ConsoleColor.Yellow;
        Console.Write(" ");
    }
    for (int i = percent; i < 100 / factor; i++)
    {
        Console.BackgroundColor = ConsoleColor.DarkCyan;
        Console.Write(" ");
    }
    Console.BackgroundColor = ConsoleColor.Black;
    Console.Write("| ");

    Console.ForegroundColor = ConsoleColor.Green;
    Console.WriteLine(string.Format("{0}%", percent * factor));
    Console.ForegroundColor = ConsoleColor.White; ;
}


https://stackblitz.com/edit/angular-google-maps-demo-umhx5f?file=app%2Fapp.component.ts,node_modules%2Fngx-mqtt%2Fsrc%2Fmqtt.service.d.ts
https://stackblitz.com/edit/angular-mqtt-test?file=app%2Fapp.component.ts
https://www.cnblogs.com/misakayoucn/p/17577059.html
NativeCredential.GetNativeCredential
https://stackoverflow.com/questions/4822400/register-an-exe-so-you-can-run-it-from-any-command-line-in-windows
https://qiita.com/kawaidainf/items/0aeace9a49b9770e2545
SET "PATH=C:\test\2022\cmdtest\cmdtest\bin\Debug\net7.0;%PATH%"
https://www.peterviola.com/using-c-to-modify-windows-server-environment-variables/
Process process = new Process();
https://github.com/malcomvetter/WMIProcessWatcher/blob/master/WMIProcessWatcher/Program.cs
  process.StartInfo.FileName = "notepad.exe";
private createNewWebSocket(jobId: string): WebSocketSubject<any>
  process.StartInfo.Verb = "open";

  process.StartInfo.WindowStyle = ProcessWindowStyle.Minimized;

  process.StartInfo.Arguments = @"//127.0.0.1@32356/DavWWWRoot/z.txt";

  process.Start();

https://github.com/poychang/demo-register-app-custom-url-protocol
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Security.Cryptography;
一些常數：
https://github.com/zLulus/NotePractice/blob/dev3/Console/DotNet6/DotNet6.CodeLibrary/WatchFileTest/WatchByFileProviderDemo.cs
// maxHashSize needs to be a multiple of 4 for the Base64 Encoding
protected static readonly int maxHashSize = 48;

// Length of the random salt. Can be any length.
protected static readonly int saltSize = 5;
maxHashSize是產生的Hash（包括Salt）的最大字串長度。請注意，由於 BASE64 編碼，該長度必須是 4 的倍數。例如，如果資料庫中的密碼列有 50 個字元寬，則 maxHashSize 為 48 是一個合理的選擇。

saltSize是用於 Salt 的位元組數。

public static string ComputeHash(
  string myPassword,
  byte[] saltBytes = null)
{
  // randomly create the Salt
  // unless it has been passed in
  if (saltBytes == null)
  {
    saltBytes = new byte[saltSize];
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
    rng.GetNonZeroBytes(saltBytes);
  }

  // Concat the Salt and Password
  byte[] myPasswordBytes = Encoding.UTF8.GetBytes(myPassword);
  byte[] myPasswordWithSaltBytes = 
    saltBytes.Concat(myPasswordBytes).ToArray();

  // Hash the Salt + Password
  HashAlgorithm hash = new SHA512Managed();
  byte[] hashBytes = hash.ComputeHash(myPasswordWithSaltBytes);
  byte[] hashWithSaltBytes = saltBytes.Concat(hashBytes).ToArray();

  // Convert to BASE64 and cut off after the maximum size
  string hashValue = Convert.ToBase64String(hashWithSaltBytes);
  return hashValue.Substring(0, maxHashSize);
}
除非傳入 Salt，否則此方法會建立隨機 Salt。然後，將 Salt 與密碼連接並進行雜湊處理。對於雜湊函數，可以使用任何實作 HashAlgorithm 的類，請參閱此處 的列表。一般來說，*託管類別可以在大多數情況下使用。如果您有特殊的政府認證要求，可以選擇經過 FIPS 認證的 *CNG 類別。

public static bool VerifyHash(
  string myPassword,
  string hashValue)
{
  // Convert base64-encoded hash value into a byte array.
  byte[] hashWithSaltBytes = Convert.FromBase64String(hashValue);

  // Copy salt from the beginning of the hash to the new array.
  byte[] saltBytes = hashWithSaltBytes.Take(saltSize).ToArray();

  // Compute a new hash string.
  string expectedHashString = 
    ComputeHash(myPassword, saltBytes);

  // If the computed hash matches the specified hash,
  // the myPassword value must be correct.
  return (hashValue == expectedHashString);
}
讓我們看看它的實際效果：

public static void Main (string[] args)
{
  string myPass = "MySecretPassword";
  string myHash = ComputeHash(myPass);

  if (VerifyHash(myPass, myHash))
  {
    Console.WriteLine("The password was correct!");
  }
}
@rem 作用：通过批处理脚本命令行编译VS工程
@Echo OFF
Echo "Building solution/project file using batch file"
SET PROGRAM_32BIT=%ProgramFiles%
if not "%ProgramFiles%" == "" set PROGRAM_32BIT=%ProgramFiles%
set buildconfig="Release|Any CPU"
SET DevEnvPath=%PROGRAM_32BIT%\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe
SET SolutionPath=C:\test\2022\inno\WordAddIn1.sln
SET BuildLogFile=C:\test\BuildErrorLog1.txt
if not exist "%DevEnvPath%" ECHO "no file1" &goto END
if not exist "%SolutionPath%" ECHO "no file2" &goto END
if exist "%BuildLogFile%" DEL /Q "%BuildLogFile%"
Echo Start Time - %Time%
"%DevEnvPath%"  "%SolutionPath%" /clean %buildconfig% /out "%BuildLogFile%" 
"%DevEnvPath%"  "%SolutionPath%" /rebuild %buildconfig% /out "%BuildLogFile%"
@rem call "C:\Program Files (x86)\Inno Setup 6\compil32.exe" /cc C:\Users\Honjay\Desktop\aa\test.iss
@rem exit /b
Echo End Time - %Time%
@rem Set /p Wait=Build Process Completed...
type "%BuildLogFile%"

:END
Set /p Wait=Build Process Completed...
@echo on
MarkInternalAsUnsafe
@rem 说明：Windows平台命令行编译脚本
@rem 作用：通过批处理脚本命令行编译VS工程
@echo off
@rem usage: build.bat Release/Debug Win32/x64


@rem set build_config="Debug|Win32"
@rem set build_config="Release|Win32"
@rem set build_config=$ALL

@rem 当前环境设置只在本文件中有效
@setlocal
@rem "命令行输入参数"
set build=%1
set platform=%2
set build_config="%build%|%platform%"

@echo %date% %time%  >build.log

@rem 当前脚本所在路径
@echo "编译目录..."
@echo %~dp0
set build_root = %~dp0

@rem 各种文件和路径
set VCVARS="%VS120COMNTOOLS%../../VC/vcvarsall.bat"
set DEVENV="%VS120COMNTOOLS%../IDE/devenv.exe"

@rem 设置解决方案路径
set SOlUTION="%~dp0libxvidcore.sln"
@echo "解决方案..."
@echo %SOLUTION%

@rem 检查文件路径配置
if not exist %VCVARS% echo "VCVARS不存在！" &goto end
if not exist %DEVENV% echo "DEVENV不存在！" &goto end
if not exist %SOlUTION% echo "SOlUTION不存在！" &goto end

@rem 删除输出文件
if exist build.log del build.log

@rem 编译环境配置
@echo "环境配置..."
if %platform%=="Win32"  (
     echo "Windows 32位环境配置..."
     call %VCVARS% x86)

if %platform%=="x64" (
     echo "Windows 64位环境配置..."
     call %VCVARS% x86_amd64)

@echo build_config:%build_config%,please waiting

@echo "开始编译"
%DEVENV% %SOlUTION% /rebuild %build_config% /out build.log

@rem 打印编译信息
@rem notepad build.log
type build.log

copy %~dp0bin\xvidcore.dll  %~dp0..\lib\
copy %~dp0bin\xvidcore.lib  %~dp0..\lib\


:end
@rem pause
@endlocal
https://soaringleefighting.github.io/2017/09/25/%E3%80%90PE%E7%B3%BB%E5%88%97%E3%80%91%E9%80%9A%E8%BF%87%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91VS%E5%B7%A5%E7%A8%8B/
http://binaryworld.net/blogs/how-to-compile-visual-studio-solution-from-commandline-and-check-status-in-dos-bat-file/
https://www.cnblogs.com/yaopengfei/p/8229175.html
     CancellationTokenSource cts;
     CancellationToken cancellationToken;
     private async void Process(CancellationToken cancellationToken)
     {
         while (true)
         {
             if (cancellationToken.IsCancellationRequested)
             {
                 return;
             }
             Thread.Sleep(1000);
             label1.Invoke(new Action(() => label1.Text = $"{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")}程序正在运行..."));

             Thread.Sleep(500);
         }
     }
     private async void button4_Click(object sender, EventArgs e)
     {
         cts = new CancellationTokenSource();
         cancellationToken = cts.Token;
         Task task = Task.Run(() => Process(cancellationToken)); 
     } 
     private void button5_Click(object sender, EventArgs e)
     {
       
         if (cts != null && !cts.IsCancellationRequested)
         {
             cts.Cancel();
         }
     }
https://stackblitz.com/edit/clarity-angular8-starter-auvjuz?file=src%2Fapp%2Fapp.component.html,src%2Fapp%2Fapp.component.ts
https://www.jianshu.com/p/73e423fe271c
<form clrForm>
  <clr-input-container>
    <label>This is built with clr input</label>
    <input placeholder="Full name" clrInput [(ngModel)]="clrExample" name="name" required />
    <clr-icon shape="search" size="24"></clr-icon>
    <clr-control-helper>Helper text</clr-control-helper>
    <clr-control-error>This field is required!</clr-control-error>
  </clr-input-container>
</form>


<div class="clr-form-control">
  <label for="basic" class="clr-control-label">This is built with clarity css</label>
  <div class="clr-control-container" [class.clr-error]="!cssExample">
    <div class="clr-input-wrapper">
      <input type="text" id="basic" width="20px"  [(ngModel)]="cssExample" placeholder="Enter value here" class="clr-input" required>
      <clr-icon class="clr-validate" shape="search"></clr-icon>
    </div>
    <span class="clr-subtext">Helper Text</span>
  </div>
</div>



@ViewChildren(ClrDatagridColumn) columns:QueryList<ClrDatagridColumn>;
   
  clearFilter() {
    this.columns.forEach((column) => (column.updateFilterValue = ''));
    this.columns.forEach((column) => (column.sortBy = ''));
    this.columns.forEach((column) => (column.sortOrder = ClrDatagridSortOrder.UNSORTED));
  }
}

interface Foo {
  [key: string]: QueryList<ClrDatagridColumn>;
}

https://www.joe0.com/2019/01/27/how-create-a-custom-browser-uri-scheme-and-c-protocol-handler-client-that-supports-opening-and-editing-of-remotely-hosted-documents-through-webdav/

https://github.com/snowflakedb/snowflake-connector-net/issues/308
https://github.com/ookii-dialogs/ookii-dialogs-winforms/blob/master/sample/shared/MainForm.Designer.cs

https://www.codeproject.com/Questions/802916/Window-Authentication-in-WinForms-Applicaton
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:31592",
      "sslPort": 0
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "weatherforecast",
      "applicationUrl": "http://localhost:5140",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "weatherforecast",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
https://ithelp.ithome.com.tw/articles/10260630



https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book/blob/master/TensorFlow%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%B8%A6%E7%9B%AE%E5%BD%95%EF%BC%89.pdf
https://github.com/eyalmolad/gotask/tree/master
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Linq;
  public  void MoveDirectory(string source, string target)
        {
            var sourcePath = source.TrimEnd('\\', ' ');
            var targetPath = target.TrimEnd('\\', ' ');
            var files = Directory.EnumerateFiles(sourcePath, "*", SearchOption.AllDirectories)
                                 .GroupBy(s => Path.GetDirectoryName(s));
            foreach (var folder in files)
            {
                var targetFolder = folder.Key.Replace(sourcePath, targetPath);
                Directory.CreateDirectory(targetFolder);
                foreach (var file in folder)
                {
                    var targetFile = Path.Combine(targetFolder, Path.GetFileName(file));
                    if (System.IO.File.Exists(targetFile)) System.IO.File.Delete(targetFile);
                    System.IO.File.Move(file, targetFile);
                }
            }
            Directory.Delete(source, true);
        }
namespace webdavconsole
{
    class Program
    {
        static void Main(string[] args)
        {
            var baseUri = "http://127.0.0.1:8080/";
            var directory = "C:\\WebDavRoot\\vr\\";
            HttpListener listener = new HttpListener();
            listener.Prefixes.Add(baseUri);
          //  listener.AuthenticationSchemes = AuthenticationSchemes.Basic;
            //string username = "advtek09.jn";
            //string password = "1qaz2wsxC";
            //listener.AuthenticationSchemeSelectorDelegate = new AuthenticationSchemeSelector(AuthenticationSchemeForClient);

            listener.Realm = "WebDAV server";
            listener.Start();
            Console.WriteLine("WebDAV server running...");

            while (true)
            {
                HttpListenerContext context = listener.GetContext();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                Console.WriteLine("Request: {0} {1}", request.HttpMethod, request.RawUrl);
                //string fullPath = rootPath + request.Url.LocalPath;

                //FileInfo fileInfo = new FileInfo(fullPath);
                var url = "vr";// request.Url.AbsolutePath.TrimEnd('/');
                var filePath = Path.Combine(directory, url);
                // filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                var dept = "OA-MARS02";
                var fileid = "63ed1c05-3232-4904-b265-52258b0179d0";
                filePath = string.Format(@"\\10.55.9.77\PDOCS$\TN002\{0}\DOCUMENTS\{1}\{2}", dept, dept, fileid);
                if (request.HttpMethod == "GET")
                {
                    if (File.Exists(filePath))
                    {
                        response.ContentType = "application/octet-stream";
                        response.ContentLength64 = new FileInfo(filePath).Length;

                        using (var stream = new FileInfo(filePath).OpenRead())
                        {
                            stream.CopyTo(response.OutputStream);
                        }

                        response.StatusCode = (int)HttpStatusCode.OK;
                    }
                    response.Close();
                }
                else if (request.HttpMethod == "PUT")
                { 
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        request.InputStream.CopyTo(fs);
                        response.StatusCode = (int)HttpStatusCode.Created;
                    }

                    response.Close();

                    ////string filePath = request.Url.LocalPath.Substring(1);
                    //filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    //byte[] contentBytes = new byte[request.ContentLength64];
                    //request.InputStream.Read(contentBytes, 0, contentBytes.Length);
                    //string content = Encoding.UTF8.GetString(contentBytes);

                    //Console.WriteLine("Received content: {0}", content);

                    //using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
                    //{
                    //    fileStream.Write(contentBytes, 0, contentBytes.Length);
                    //}

                    //response.StatusCode = 201;
                    //response.StatusDescription = "Created";
                }
                else if (request.HttpMethod == "OPTIONS")
                {
                    response.Headers.Add("Allow", "OPTIONS, TRACE, GET, HEAD, POST, COPY, PROPFIND, DELETE, MOVE, PROPPATCH, MKCOL, LOCK, UNLOCK");
                    response.Headers.Add("Public", "OPTIONS, TRACE, GET, HEAD, POST, PROPFIND, PROPPATCH, MKCOL, PUT, DELETE, COPY, MOVE, LOCK, UNLOCK");
                    response.Headers.Add("MS-Author-Via", "DAV");
                    response.Headers.Add("DAV", "1,2,3");
                    response.StatusCode = 200;
                    response.Close();
                }
                else if (request.HttpMethod == "HEAD")
                { 
                    using (UNCAccessWithCredentials unc = new UNCAccessWithCredentials())
                    {
                        try
                        {
                            if (unc.NetUseWithCredentials(@"\\10.55.9.77\PDOCS$",
                                                      "public.tnnas.PDOCS",
                                                      @"cminl",
                                                      "P@ssw0rd20221209055"))
                            {
                                var path1 = string.Format(@"\\10.55.9.77\PDOCS$\TN002\{0}\DOCUMENTS\{1}\{2}", dept, dept, fileid);
                                if (!File.Exists(path1))
                                {
                                    response.StatusCode = (int)HttpStatusCode.NotFound;
                                    return;
                                }
                                else 
                                {
                                    // Get file info
                                    FileInfo fileInfo = new FileInfo(path1);

                                    response.ContentLength64 = fileInfo.Length;
                                    response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                                    string etag = fileInfo.Length.ToString();
                                    response.AddHeader("ETag", "\"" + etag + "\"");
                                    response.Headers.Add(HttpResponseHeader.LastModified, fileInfo.LastWriteTimeUtc.ToString("r"));
                                    response.StatusCode = (int)HttpStatusCode.OK;
                                    response.Close();
                                }
                            }
                            else
                            {

                            }
                        }
                        catch (Exception ex)
                        {
                        
                        }

                    } 
                }
                else if (context.Request.HttpMethod == "LOCK")
                {
                    string requestUrl = request.Url.ToString();
                    string lockToken = Guid.NewGuid().ToString();

                    // Check if the resource is already locked
                    if (IsLocked(requestUrl))
                    {
                        // Resource is already locked, return 423 Locked status code
                        response.StatusCode = (int)HttpStatusCode.Locked;
                        response.Close();
                        return;
                    }

                    //// Parse the lock request XML
                    //XmlDocument xmlDoc = new XmlDocument();
                    //xmlDoc.Load(context.Request.InputStream);
                    //XmlNamespaceManager namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);
                    //namespaceManager.AddNamespace("D", "DAV:");
                    //XmlNode lockScopeNode = xmlDoc.SelectSingleNode("//D:lockscope/D:exclusive", namespaceManager);
                    //XmlNode lockTypeNode = xmlDoc.SelectSingleNode("//D:locktype/D:write", namespaceManager);
                    //XmlNode ownerNode = xmlDoc.SelectSingleNode("//D:owner", namespaceManager);

                    //// Set the lock timeout
                    //int lockTimeout = 0;
                    //string timeoutHeader = context.Request.Headers.Get("Timeout");
                    //if (!string.IsNullOrEmpty(timeoutHeader) && timeoutHeader.StartsWith("Second-"))
                    //{
                    //    int.TryParse(timeoutHeader.Substring(7), out lockTimeout);
                    //}

                    // Create the lock info
                    //LockInfo lockInfo = new LockInfo();
                    //lockInfo.ResourceUrl = requestUrl;
                    //lockInfo.LockScope = lockScopeNode != null ? LockScope.Exclusive : LockScope.Shared;
                    //lockInfo.LockType = lockTypeNode != null ? LockType.Write : LockType.Read;
                    //lockInfo.Owner = ownerNode != null ? ownerNode.InnerText : null;
                    //lockInfo.Timeout = lockTimeout;
                    //lockInfo.LockToken = lockToken;
                    //lockInfo.LockTime = DateTime.UtcNow;

                    //// Add the lock to the locked resources dictionary
                    //_lockedResources.Add(requestUrl, lockInfo);

                    // Set the lock token header in the response
                    response.AddHeader("Lock-Token", $"<urn:uuid:{lockToken}>");

                    // Return 200 OK status code
                    response.StatusCode = (int)HttpStatusCode.OK;
                    response.Close();

                }
                else if (context.Request.HttpMethod == "UNLOCK")
                {
                    string lockToken = context.Request.Headers["Lock-Token"];

                    if (string.IsNullOrEmpty(lockToken))
                    {
                        context.Response.StatusCode = (int)HttpStatusCode.BadRequest;
                        return;
                    }

                    // TODO: Validate the lock token and perform any necessary unlocking logic

                    context.Response.StatusCode = (int)HttpStatusCode.NoContent;
                    response.Close();
                }
                else if (context.Request.HttpMethod == "PROPFIND")
                {
                    // Get the path requested by the client
                    string path = request.Url.LocalPath;

                    if (path == "/")
                        path = directory;
                    // Check if the path is a directory
                    bool isDir = Directory.Exists(path);

                    // If the path is not a directory, check if it is a file
                    if (!isDir)
                    {
                        isDir = File.Exists(path);
                    }

                    // If the path is neither a directory nor a file, return 404 Not Found
                    if (!isDir)
                    {
                        response.StatusCode = (int)HttpStatusCode.NotFound;
                        return;
                    }

                  
                   
                    // Build the XML response
                    var xMultiStatus = new XElement(DNs + "multistatus", new XAttribute(XNamespace.Xmlns + "D", DavNs));
                    var xml = new XDocument(xMultiStatus);

                   // XDocument xml = new XDocument(new XElement(xx+"multistatus", new XAttribute(XNamespace.Xmlns + "D", xxx)));

                    // Add a response element for the directory or file
                    xml.Root.Add(CreateResponseElement(path, isDir));

                    // If the path is a directory, add response elements for the directory's files
                    if (isDir)
                    {
                        string[] files = Directory.GetFiles(path);

                        foreach (string file in files)
                        {
                            xml.Root.Add(CreateResponseElement(file, false));
                        }
                    }

                    byte[] bodyBytes = Encoding.UTF8.GetBytes(xml.ToString());

                    response.StatusCode = 207; // Multi-Status
                    response.ContentType = "text/xml";
                    response.ContentLength64 = bodyBytes.Length;
                    response.OutputStream.Write(bodyBytes, 0, bodyBytes.Length);
                    //response.Close();

                    // Set the response headers
                    //response.ContentType = "text/xml; charset=utf-8";
                    //response.ContentEncoding = Encoding.UTF8;
                    //response.StatusCode = (int)HttpStatusCode.MultiStatus;

                    //// Write the XML response to the output stream
                    //using (Stream output = response.OutputStream)
                    //{
                    //    byte[] buffer = Encoding.UTF8.GetBytes(xml.ToString());
                    //    output.Write(buffer, 0, buffer.Length);
                    //}





                    //string path = context.Request.Url.LocalPath;
                    //filePath = directory + path.Substring(1);


                    //string body = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
                    //     "<D:multistatus xmlns:D=\"DAV:\">" +
                    //     "<D:response>" +
                    //     "<D:href>/file.txt</D:href>" +
                    //     "<D:propstat>" +
                    //     "<D:prop>" +
                    //     "<D:getlastmodified>Wed, 23 Aug 2017 09:23:47 GMT</D:getlastmodified>" +
                    //     "<D:getetag>\"4c4e4f4e455253454c4c4f57\"</D:getetag>" +
                    //     "<D:getcontenttype>text/plain</D:getcontenttype>" +
                    //     "<D:getcontentlength>12</D:getcontentlength>" +
                    //     "</D:prop>" +
                    //     "<D:status>HTTP/1.1 200 OK</D:status>" +
                    //     "</D:propstat>" +
                    //     "</D:response>" +
                    //     "</D:multistatus>";

                    //byte[] bodyBytes = Encoding.UTF8.GetBytes(body);

                    //response.StatusCode = 207; // Multi-Status
                    //response.ContentType = "text/xml";
                    //response.ContentLength64 = bodyBytes.Length;
                    //response.OutputStream.Write(bodyBytes, 0, bodyBytes.Length);
                    //response.Close();

                    //string depthString = request.Headers["Depth"];
                    //int depth = depthString == "infinity" ? int.MaxValue : int.Parse(depthString);

                    ////if (!Directory.Exists(url))
                    ////{
                    ////    response.StatusCode = 404; // Not Found
                    ////    return;
                    ////}

                    //XNamespace davNs = "DAV:";
                    //XDocument xml = new XDocument(
                    //    new XElement(davNs + "multistatus",
                    //        new XElement(davNs + "response",
                    //            CreateResponseElement(xml, new DirectoryInfo(url)),
                    //            new XElement(davNs + "propstat",
                    //                new XElement(davNs + "status", "HTTP/1.1 200 OK"),
                    //                new XElement(davNs + "prop",
                    //                    new XElement(davNs + "creationdate"),
                    //                    new XElement(davNs + "getlastmodified"),
                    //                    new XElement(davNs + "displayname"),
                    //                    new XElement(davNs + "getcontenttype"),
                    //                    new XElement(davNs + "getcontentlength")
                    //                )
                    //            )
                    //        )
                    //    )
                    //);
                    // response.Close();
                }
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                else
                {
                    response.StatusCode = 405;
                    response.Close();
                }
            }
        }
        public static readonly XNamespace DavNs = "DAV:";
        public static readonly XNamespace DNs = "D:";
        private static XElement CreateResponseElement(string path, bool isDir)
        {
            string href = path.Replace('\\', '/');
            string displayName = Path.GetFileName(path);

            XElement response = new XElement(DNs + "response",
                new XElement(DNs + "href", href),
                new XElement(DNs + "propstat",
                    new XElement(DNs +"prop",
                        new XElement(DNs + "displayname", displayName),
                        new XElement(DNs + "getlastmodified", File.GetLastWriteTimeUtc(path).ToString("R")),
                        new XElement(DNs + "getcontentlength", isDir ? "0" : new FileInfo(path).Length.ToString()),
                        new XElement(DNs + "getcontenttype", isDir ? "httpd/unix-directory" : "application/octet-stream"),
                        new XElement(DNs + "resourcetype", isDir ? new XElement(DNs + "collection") : null)),
                    new XElement(DNs + "status", "HTTP/1.1 200 OK")));

            return response;
        }

        static XmlElement CreateElement(XmlElement parent, string name, string ns, string value)
        {
            XmlElement element = parent.OwnerDocument.CreateElement(name, ns);
            element.InnerText = value;
            return element;
        }
        private static XmlElement CreateResponseElement(XmlDocument responseXml, string path)
        {
            XmlElement response = responseXml.CreateElement("D:response", "DAV:");
            XmlElement href = responseXml.CreateElement("D:href", "DAV:");
            href.InnerText = path;
            response.AppendChild(href);
            return response;
        }

        private static void AddDirectoryProperties(XmlElement response, string path)
        {
            DirectoryInfo directory = new DirectoryInfo(path);
            response.AppendChild(CreateElement(response, "D:resourcetype", "DAV:", "<D:collection/>"));
            response.AppendChild(CreateElement(response, "D:getlastmodified", "DAV:", directory.LastWriteTimeUtc.ToString("R")));
            response.AppendChild(CreateElement(response, "D:getcontenttype", "DAV:", "httpd/unix-directory"));
            response.AppendChild(CreateElement(response, "D:getcontentlength", "DAV:", "0"));
        }

        private static void AddFileProperties(XmlElement response, string path)
        {
            FileInfo file = new FileInfo(path);
            response.AppendChild(CreateElement(response, "D:resourcetype", "DAV:", ""));
            response.AppendChild(CreateElement(response, "D:getlastmodified", "DAV:", file.LastWriteTimeUtc.ToString("R")));
            response.AppendChild(CreateElement(response, "D:getcontenttype", "DAV:", "application/octet-stream"));
            response.AppendChild(CreateElement(response, "D:getcontentlength", "DAV:", file.Length.ToString()));
        }
        //static AuthenticationSchemes AuthenticationSchemeForClient(HttpListenerRequest request)
        //{
        //    if (request.Headers["Authorization"] != null && request.Headers["Authorization"].StartsWith("Basic"))
        //    {
        //        string credentials = Encoding.ASCII.GetString(Convert.FromBase64String(request.Headers["Authorization"].Substring(6)));
        //        string[] parts = credentials.Split(':');
        //        string username = parts[0];
        //        string password = parts[1];

        //        // Check username and password against database or other authentication method
        //        if (username == "user1" && password == "pass123")
        //        {
        //            return AuthenticationSchemes.Basic;
        //        }
        //    }

        //    // No valid credentials found, so return 401 Unauthorized
        //    HttpListenerResponse response = context.Response;
        //    response.StatusCode = 401;
        //    response.AddHeader("WWW-Authenticate", "Basic realm=\"" + listener.Realm + "\"");
        //    response.OutputStream.Close();

        //    return AuthenticationSchemes.Anonymous;
        //}

        static bool IsLocked(string path)
        {
            return false;
        }


        
        //private void HandlePropfind(HttpListenerContext context)
        //{
        //    // Get the requested URL and parse it
        //    var url = new Uri(context.Request.Url.GetLeftPart(UriPartial.Path));
        //    var depth = context.Request.Headers["Depth"];
        //    var infiniteDepthMode = depth == "infinity";

        //    // Create the XML document that will contain the properties
        //    var doc = new XDocument(new XDeclaration("1.0", "utf-8", "no"));
        //    var multistatus = new XElement(WebDavXml.Dav + "multistatus");
        //    doc.Add(multistatus);

        //    // If the URL represents a directory, add its contents to the response
        //    if (Directory.Exists(url.LocalPath))
        //    {
        //        var dirInfo = new DirectoryInfo(url.LocalPath);
        //        foreach (var subDir in dirInfo.GetDirectories())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{subDir.Name}/");
        //            multistatus.Add(responseElement);
        //        }
        //        foreach (var file in dirInfo.GetFiles())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{file.Name}");
        //            multistatus.Add(responseElement);
        //        }
        //    }
        //    else if (File.Exists(url.LocalPath))
        //    {
        //        // If the URL represents a file, add its properties to the response
        //        var responseElement = CreateResponseElement(doc, url.ToString());
        //        multistatus.Add(responseElement);
        //    }

        //    // Write the response to the output stream
        //    var responseBytes = Encoding.UTF8.GetBytes(doc.ToString());
        //    context.Response.ContentLength64 = responseBytes.Length;
        //    context.Response.ContentType = "text/xml";
        //    context.Response.OutputStream.Write(responseBytes, 0, responseBytes.Length);
        //    context.Response.OutputStream.Close();
        //}

        //private XElement CreateResponseElement(XDocument doc, string href)
        //{
        //    var response = new XElement(WebDavXml.Dav + "response",
        //        new XElement(WebDavXml.Dav + "href", href),
        //        new XElement(WebDavXml.Dav + "propstat",
        //            new XElement(WebDavXml.Dav + "status", "HTTP/1.1 200 OK"),
        //            new XElement(WebDavXml.Dav + "prop",
        //                new XElement(WebDavXml.Dav + "creationdate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ")),
        //                new XElement(WebDavXml.Dav + "getlastmodified", DateTime.Now.ToString("R")),
        //                new XElement(WebDavXml.Dav + "getcontenttype", "application/octet-stream"),
        //                new XElement(WebDavXml.Dav + "getcontentlength", "0")
        //            )
        //        )
        //    );
        //    return response;
        //}

    }
}
 




using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace webdavconsole
{
    class Program
    {
        static void Main(string[] args)
        {
            var baseUri = "http://127.0.0.1:8080/";
            var directory = "C:\\WebDavRoot\\";
            HttpListener listener = new HttpListener();
            listener.Prefixes.Add(baseUri);
         //   listener.AuthenticationSchemes = AuthenticationSchemes.Ntlm;
            //string username = "advtek09.jn";
            //string password = "1qaz2wsxC";
            //listener.AuthenticationSchemeSelectorDelegate = new AuthenticationSchemeSelector(AuthenticationSchemeForClient);

            listener.Realm = "WebDAV server";
            listener.Start();
            Console.WriteLine("WebDAV server running...");

            while (true)
            {
                HttpListenerContext context = listener.GetContext();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                Console.WriteLine("Request: {0} {1}", request.HttpMethod, request.RawUrl);
                //string fullPath = rootPath + request.Url.LocalPath;

                //FileInfo fileInfo = new FileInfo(fullPath);
                var url = "vr";// request.Url.AbsolutePath.TrimEnd('/');
                var filePath = Path.Combine(directory, url);
                filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                if (request.HttpMethod == "GET")
                {
                    if (File.Exists(filePath))
                    {
                        response.ContentType = "application/octet-stream";
                        response.ContentLength64 = new FileInfo(filePath).Length;

                        using (var stream = new FileInfo(filePath).OpenRead())
                        {
                            stream.CopyTo(response.OutputStream);
                        }

                        response.StatusCode = (int)HttpStatusCode.OK;
                    }
                    response.Close();
                }
                else if (request.HttpMethod == "PUT")
                {
                    filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    using (FileStream fs = new FileStream(filePath, FileMode.Create))
                    {
                        request.InputStream.CopyTo(fs);
                        response.StatusCode = (int)HttpStatusCode.Created;
                    }

                    response.Close();

                    ////string filePath = request.Url.LocalPath.Substring(1);
                    //filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    //byte[] contentBytes = new byte[request.ContentLength64];
                    //request.InputStream.Read(contentBytes, 0, contentBytes.Length);
                    //string content = Encoding.UTF8.GetString(contentBytes);

                    //Console.WriteLine("Received content: {0}", content);

                    //using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
                    //{
                    //    fileStream.Write(contentBytes, 0, contentBytes.Length);
                    //}

                    //response.StatusCode = 201;
                    //response.StatusDescription = "Created";
                }
                else if (request.HttpMethod == "OPTIONS")
                {
                    response.Headers.Add("Allow", "OPTIONS, TRACE, GET, HEAD, POST, COPY, PROPFIND, DELETE, MOVE, PROPPATCH, MKCOL, LOCK, UNLOCK");
                    response.Headers.Add("Public", "OPTIONS, TRACE, GET, HEAD, POST, PROPFIND, PROPPATCH, MKCOL, PUT, DELETE, COPY, MOVE, LOCK, UNLOCK");
                    response.Headers.Add("MS-Author-Via", "DAV");
                    response.Headers.Add("DAV", "1,2,3");
                    response.StatusCode = 200;
                    response.Close();
                }
                else if (request.HttpMethod == "HEAD")
                {
                    filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                    if (!File.Exists(filePath))
                    {
                        response.StatusCode = (int)HttpStatusCode.NotFound;
                        return;
                    }

                    // Get file info
                    FileInfo fileInfo = new FileInfo(filePath);

                    response.ContentLength64 = fileInfo.Length;
                    response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    string etag = fileInfo.Length.ToString();
                    response.AddHeader("ETag", "\"" + etag + "\"");
                    response.Headers.Add(HttpResponseHeader.LastModified, fileInfo.LastWriteTimeUtc.ToString("r"));
                    response.StatusCode = (int)HttpStatusCode.OK;
                    response.Close();
                }
                else if (context.Request.HttpMethod == "LOCK")
                {
                    string requestUrl = request.Url.ToString();
                    string lockToken = Guid.NewGuid().ToString();

                    // Check if the resource is already locked
                    if (IsLocked(requestUrl))
                    {
                        // Resource is already locked, return 423 Locked status code
                        response.StatusCode = (int)HttpStatusCode.Locked;
                        response.Close();
                        return;
                    }

                    //// Parse the lock request XML
                    //XmlDocument xmlDoc = new XmlDocument();
                    //xmlDoc.Load(context.Request.InputStream);
                    //XmlNamespaceManager namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);
                    //namespaceManager.AddNamespace("D", "DAV:");
                    //XmlNode lockScopeNode = xmlDoc.SelectSingleNode("//D:lockscope/D:exclusive", namespaceManager);
                    //XmlNode lockTypeNode = xmlDoc.SelectSingleNode("//D:locktype/D:write", namespaceManager);
                    //XmlNode ownerNode = xmlDoc.SelectSingleNode("//D:owner", namespaceManager);

                    //// Set the lock timeout
                    //int lockTimeout = 0;
                    //string timeoutHeader = context.Request.Headers.Get("Timeout");
                    //if (!string.IsNullOrEmpty(timeoutHeader) && timeoutHeader.StartsWith("Second-"))
                    //{
                    //    int.TryParse(timeoutHeader.Substring(7), out lockTimeout);
                    //}

                    // Create the lock info
                    //LockInfo lockInfo = new LockInfo();
                    //lockInfo.ResourceUrl = requestUrl;
                    //lockInfo.LockScope = lockScopeNode != null ? LockScope.Exclusive : LockScope.Shared;
                    //lockInfo.LockType = lockTypeNode != null ? LockType.Write : LockType.Read;
                    //lockInfo.Owner = ownerNode != null ? ownerNode.InnerText : null;
                    //lockInfo.Timeout = lockTimeout;
                    //lockInfo.LockToken = lockToken;
                    //lockInfo.LockTime = DateTime.UtcNow;

                    //// Add the lock to the locked resources dictionary
                    //_lockedResources.Add(requestUrl, lockInfo);

                    // Set the lock token header in the response
                    response.AddHeader("Lock-Token", $"<urn:uuid:{lockToken}>");

                    // Return 200 OK status code
                    response.StatusCode = (int)HttpStatusCode.OK;
                    response.Close();

                }
                else if (context.Request.HttpMethod == "UNLOCK")
                {
                    string lockToken = context.Request.Headers["Lock-Token"];

                    if (string.IsNullOrEmpty(lockToken))
                    {
                        context.Response.StatusCode = (int)HttpStatusCode.BadRequest;
                        return;
                    }

                    // TODO: Validate the lock token and perform any necessary unlocking logic

                    context.Response.StatusCode = (int)HttpStatusCode.NoContent;
                    response.Close();
                }
                else if (context.Request.HttpMethod == "PROPFIND")
                {
                    //string depthString = request.Headers["Depth"];
                    //int depth = depthString == "infinity" ? int.MaxValue : int.Parse(depthString);

                    ////if (!Directory.Exists(url))
                    ////{
                    ////    response.StatusCode = 404; // Not Found
                    ////    return;
                    ////}

                    //XNamespace davNs = "DAV:";
                    //XDocument xml = new XDocument(
                    //    new XElement(davNs + "multistatus",
                    //        new XElement(davNs + "response",
                    //            CreateResponseElement(xml, new DirectoryInfo(url)),
                    //            new XElement(davNs + "propstat",
                    //                new XElement(davNs + "status", "HTTP/1.1 200 OK"),
                    //                new XElement(davNs + "prop",
                    //                    new XElement(davNs + "creationdate"),
                    //                    new XElement(davNs + "getlastmodified"),
                    //                    new XElement(davNs + "displayname"),
                    //                    new XElement(davNs + "getcontenttype"),
                    //                    new XElement(davNs + "getcontentlength")
                    //                )
                    //            )
                    //        )
                    //    )
                    //);
                    response.Close();
                }
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                else
                {
                    response.StatusCode = 405;
                    response.Close();
                }
            }
        }
        //static AuthenticationSchemes AuthenticationSchemeForClient(HttpListenerRequest request)
        //{
        //    if (request.Headers["Authorization"] != null && request.Headers["Authorization"].StartsWith("Basic"))
        //    {
        //        string credentials = Encoding.ASCII.GetString(Convert.FromBase64String(request.Headers["Authorization"].Substring(6)));
        //        string[] parts = credentials.Split(':');
        //        string username = parts[0];
        //        string password = parts[1];

        //        // Check username and password against database or other authentication method
        //        if (username == "user1" && password == "pass123")
        //        {
        //            return AuthenticationSchemes.Basic;
        //        }
        //    }

        //    // No valid credentials found, so return 401 Unauthorized
        //    HttpListenerResponse response = context.Response;
        //    response.StatusCode = 401;
        //    response.AddHeader("WWW-Authenticate", "Basic realm=\"" + listener.Realm + "\"");
        //    response.OutputStream.Close();

        //    return AuthenticationSchemes.Anonymous;
        //}

        static bool IsLocked(string path)
        {
            return false;
        }
        //private void HandlePropfind(HttpListenerContext context)
        //{
        //    // Get the requested URL and parse it
        //    var url = new Uri(context.Request.Url.GetLeftPart(UriPartial.Path));
        //    var depth = context.Request.Headers["Depth"];
        //    var infiniteDepthMode = depth == "infinity";

        //    // Create the XML document that will contain the properties
        //    var doc = new XDocument(new XDeclaration("1.0", "utf-8", "no"));
        //    var multistatus = new XElement(WebDavXml.Dav + "multistatus");
        //    doc.Add(multistatus);

        //    // If the URL represents a directory, add its contents to the response
        //    if (Directory.Exists(url.LocalPath))
        //    {
        //        var dirInfo = new DirectoryInfo(url.LocalPath);
        //        foreach (var subDir in dirInfo.GetDirectories())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{subDir.Name}/");
        //            multistatus.Add(responseElement);
        //        }
        //        foreach (var file in dirInfo.GetFiles())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{file.Name}");
        //            multistatus.Add(responseElement);
        //        }
        //    }
        //    else if (File.Exists(url.LocalPath))
        //    {
        //        // If the URL represents a file, add its properties to the response
        //        var responseElement = CreateResponseElement(doc, url.ToString());
        //        multistatus.Add(responseElement);
        //    }

        //    // Write the response to the output stream
        //    var responseBytes = Encoding.UTF8.GetBytes(doc.ToString());
        //    context.Response.ContentLength64 = responseBytes.Length;
        //    context.Response.ContentType = "text/xml";
        //    context.Response.OutputStream.Write(responseBytes, 0, responseBytes.Length);
        //    context.Response.OutputStream.Close();
        //}

        //private XElement CreateResponseElement(XDocument doc, string href)
        //{
        //    var response = new XElement(WebDavXml.Dav + "response",
        //        new XElement(WebDavXml.Dav + "href", href),
        //        new XElement(WebDavXml.Dav + "propstat",
        //            new XElement(WebDavXml.Dav + "status", "HTTP/1.1 200 OK"),
        //            new XElement(WebDavXml.Dav + "prop",
        //                new XElement(WebDavXml.Dav + "creationdate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ")),
        //                new XElement(WebDavXml.Dav + "getlastmodified", DateTime.Now.ToString("R")),
        //                new XElement(WebDavXml.Dav + "getcontenttype", "application/octet-stream"),
        //                new XElement(WebDavXml.Dav + "getcontentlength", "0")
        //            )
        //        )
        //    );
        //    return response;
        //}

    }
}
 


如果您需要将文档从MS office only选项保存到服务器，则PROPFIND和GET是不够的。

下面是您需要实现的列表: GET、HEAD、LOCK、OPTIONS、PROPFIND、PROPPATCH、PUT、UNLOCK

RFC 2518被RFC 4918取代。
http://cn.voidcc.com/question/p-nhrubxuf-baz.html
https://github.com/JingoC/WebDavServer/tree/master/WebDavServer.WebApi
https://github.com/ramondeklein/nwebdav/blob/15afc74b9adb2f4ed9d406022cb61d76fff45157/NWebDav.Server/Handlers/PropFindHandler.cs#L62
https://pydigger.com/pypi/webdavclient
 class Program
    {
        static void Main(string[] args)
        {
            var baseUri = "http://127.0.0.1:8080/";
            var directory = "C:\\WebDavRoot\\";
            HttpListener listener = new HttpListener();
            listener.Prefixes.Add(baseUri);
            listener.AuthenticationSchemes = AuthenticationSchemes.Anonymous;
            listener.Realm = "WebDAV server";
            listener.Start();
            Console.WriteLine("WebDAV server running...");

            while (true)
            {
                HttpListenerContext context = listener.GetContext();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                Console.WriteLine("Request: {0} {1}", request.HttpMethod, request.RawUrl);
                //string fullPath = rootPath + request.Url.LocalPath;

                //FileInfo fileInfo = new FileInfo(fullPath);
                var url = "vr";// request.Url.AbsolutePath.TrimEnd('/');
                var filePath = Path.Combine(directory, url);
                filePath = @"C:\\WebDavRoot\\vr\\z.xlsx";
                if (request.HttpMethod == "GET")
                {
                    if (File.Exists(filePath))
                    {
                        response.ContentType = "text/plain";
                        response.ContentLength64 = new FileInfo(filePath).Length;

                        using (var stream = new FileInfo(filePath).OpenRead())
                        {
                            stream.CopyTo(response.OutputStream);
                        }

                        response.StatusCode = (int)HttpStatusCode.OK;
                    }
                }
                else if (request.HttpMethod == "PUT")
                {
                    //string filePath = request.Url.LocalPath.Substring(1);
                    //byte[] contentBytes = new byte[request.ContentLength64];
                    //request.InputStream.Read(contentBytes, 0, contentBytes.Length);
                    //string content = Encoding.UTF8.GetString(contentBytes);

                    //Console.WriteLine("Received content: {0}", content);

                    //using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
                    //{
                    //    fileStream.Write(contentBytes, 0, contentBytes.Length);
                    //}

                    //response.StatusCode = 201;
                    //response.StatusDescription = "Created";
                }
                else if (request.HttpMethod == "OPTIONS")
                {
                    response.Headers.Add("Allow", "GET, HEAD, PROPFIND, PROPPATCH, MKCOL, PUT, DELETE, COPY, MOVE, LOCK, UNLOCK");
                    response.Headers.Add("DAV", "1, 2");
                    response.StatusCode = 200;
                    response.OutputStream.Close();
                }
                else if (context.Request.HttpMethod == "PROPFIND")
                {
                    //string path = request.Url.LocalPath.TrimEnd('/');
                    //string xml = @"<?xml version=""1.0"" encoding=""utf-8""?>
                    //<D:multistatus xmlns:D=""DAV:"">
                    //  <D:response>
                    //    <D:href>" + path + @"</D:href>
                    //    <D:propstat>
                    //      <D:prop>
                    //        <D:creationdate>2021-09-01T00:00:00Z</D:creationdate>
                    //        <D:getcontenttype>application/octet-stream</D:getcontenttype>
                    //        <D:getcontentlength>1234</D:getcontentlength>
                    //        <D:getlastmodified>2021-09-01T00:00:00Z</D:getlastmodified>
                    //      </D:prop>
                    //      <D:status>HTTP/1.1 200 OK</D:status>
                    //    </D:propstat>
                    //  </D:response>
                    //</D:multistatus>";

                    //byte[] xmlBytes = Encoding.UTF8.GetBytes(xml);
                    //response.ContentLength64 = xmlBytes.Length;
                    //response.ContentType = "application/xml";
                    //response.OutputStream.Write(xmlBytes, 0, xmlBytes.Length);
                    //response.OutputStream.Close();
                }
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                //else if (context.Request.HttpMethod == "PROPFIND")
                //{
                //}
                else
                {
                    response.StatusCode = 405;
                    response.OutputStream.Close();
                }
            }
        }

        //private void HandlePropfind(HttpListenerContext context)
        //{
        //    // Get the requested URL and parse it
        //    var url = new Uri(context.Request.Url.GetLeftPart(UriPartial.Path));
        //    var depth = context.Request.Headers["Depth"];
        //    var infiniteDepthMode = depth == "infinity";

        //    // Create the XML document that will contain the properties
        //    var doc = new XDocument(new XDeclaration("1.0", "utf-8", "no"));
        //    var multistatus = new XElement(WebDavXml.Dav + "multistatus");
        //    doc.Add(multistatus);

        //    // If the URL represents a directory, add its contents to the response
        //    if (Directory.Exists(url.LocalPath))
        //    {
        //        var dirInfo = new DirectoryInfo(url.LocalPath);
        //        foreach (var subDir in dirInfo.GetDirectories())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{subDir.Name}/");
        //            multistatus.Add(responseElement);
        //        }
        //        foreach (var file in dirInfo.GetFiles())
        //        {
        //            var responseElement = CreateResponseElement(doc, $"{url}/{file.Name}");
        //            multistatus.Add(responseElement);
        //        }
        //    }
        //    else if (File.Exists(url.LocalPath))
        //    {
        //        // If the URL represents a file, add its properties to the response
        //        var responseElement = CreateResponseElement(doc, url.ToString());
        //        multistatus.Add(responseElement);
        //    }

        //    // Write the response to the output stream
        //    var responseBytes = Encoding.UTF8.GetBytes(doc.ToString());
        //    context.Response.ContentLength64 = responseBytes.Length;
        //    context.Response.ContentType = "text/xml";
        //    context.Response.OutputStream.Write(responseBytes, 0, responseBytes.Length);
        //    context.Response.OutputStream.Close();
        //}

        //private XElement CreateResponseElement(XDocument doc, string href)
        //{
        //    var response = new XElement(WebDavXml.Dav + "response",
        //        new XElement(WebDavXml.Dav + "href", href),
        //        new XElement(WebDavXml.Dav + "propstat",
        //            new XElement(WebDavXml.Dav + "status", "HTTP/1.1 200 OK"),
        //            new XElement(WebDavXml.Dav + "prop",
        //                new XElement(WebDavXml.Dav + "creationdate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ")),
        //                new XElement(WebDavXml.Dav + "getlastmodified", DateTime.Now.ToString("R")),
        //                new XElement(WebDavXml.Dav + "getcontenttype", "application/octet-stream"),
        //                new XElement(WebDavXml.Dav + "getcontentlength", "0")
        //            )
        //        )
        //    );
        //    return response;
        //}

    }


using (var conn = new NpgsqlConnection("User ID=postgres;Password=12345;Host=localhost;Port=5432;Database=postgres;Pooling=true;"))
			{
				conn.Open();
				NpgsqlCommand cmdd = new NpgsqlCommand();
				cmdd.Connection = conn;

				NpgsqlParameter[] arParams = new NpgsqlParameter[2];

				arParams[0] = new NpgsqlParameter("$1", NpgsqlTypes.NpgsqlDbType.Varchar, 36);
				arParams[0].Direction = ParameterDirection.Input;
				arParams[0].Value ="k";

				arParams[1] = new NpgsqlParameter("$2", NpgsqlTypes.NpgsqlDbType.Varchar, 36);
				arParams[1].Direction = ParameterDirection.Input;
				arParams[1].Value = "t";

				//	cmdd.CommandType = CommandType.StoredProcedure;
				//cmdd.CommandText = "CALL addnewuser ( @passedemail , @passedpass , '5' )";
				//cmdd.CommandText = "call transfer2($1,$2)";
				cmdd.CommandText = "call transfer2('1','2')";
				//cmdd.Parameters.AddWithValue("sender", NpgsqlDbType.Varchar, "b");
				//cmdd.Parameters.AddWithValue("receiver", NpgsqlDbType.Varchar, "p");
				//cmdd.Parameters.AddRange(arParams);

				cmdd.ExecuteNonQuery();

				//Console.WriteLine(cmdd.Statements[0]);
				conn.Close();
				//conn.Open();
				//using (var cmd = conn.CreateCommand())
				//{
				//	cmd.CommandText = "CALL transfer()";
				//	cmd.ExecuteNonQuery();
				//}
				//conn.Close();
			}
static public IEnumerable<T> SkipLast<T>(this IEnumerable<T> data, int count)
		{
			if (data == null || count < 0) yield break;
			if (count == 0)
			{
				foreach (T item in data)
					yield return item;
			}
			else
			{
				T[] queue = data.Take(count).ToArray();
				int index = 0;

				foreach (T item in data.Skip(count))
				{
					index %= count;
					yield return queue[index];
					queue[index] = item;
					index++;
				}
			}
		}
	}			var o = string.Join("/", a.TrimStart('/').Split('/').SkipLast(1));

https://blog.csdn.net/carcarrot/article/details/106098200

using Microsoft.Practices.EnterpriseLibrary.Data;
using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Webdev
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
           var db= DatabaseFactory.CreateDatabase();
            var cmd = db.GetSqlStringCommand("select * from ddd");
            var g = db.ExecuteDataSet(cmd);
        }
        public static NpgsqlCommand With(this NpgsqlCommand command, string name, object value, NpgsqlDbType dbType)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value ?? DBNull.Value;
            parameter.NpgsqlDbType = dbType;
            command.Parameters.Add(parameter);

            return command;
        }
		public static NpgsqlDbType DbType2PgsqlDbType(DbType DbType_in)
		{
			switch (DbType_in)
			{
				case DbType.Int64:
					return NpgsqlDbType.Bigint;
				case DbType.Int32:
					return NpgsqlDbType.Integer;
				case DbType.Int16:
					return NpgsqlDbType.Smallint;
				case DbType.Boolean:
					return NpgsqlDbType.Boolean; 
				case DbType.String: 
					return NpgsqlDbType.Varchar; 
				case DbType.DateTime:
					return NpgsqlDbType.Timestamp;
				case DbType.Single:
					return NpgsqlDbType.Real;
				case DbType.Double:
					return NpgsqlDbType.Double;
				case DbType.Decimal:
					return NpgsqlDbType.Numeric; 
				default:
					{
						throw new Exception(string.Format("undefined variable type: {0}", DbType_in.ToString() ));
					}
				 
			}
		}
}

https://guokai-ni.blogspot.com/2016/07/kendo-grid-2-inline-edit.html


clrPopoverOpenCloseButton
https://www.pudn.com/detail/5937630

import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { ClrDatagrid, ClrDatagridStateInterface } from '@clr/angular';
import * as faker from 'faker';

import {ClrDatagridFilterInterface} from "@clr/angular";
class OrFilter implements ClrDatagridFilterInterface<any> {
  property: string;
  model: boolean = true;
  txt:string;
  changes = new Subject<any>();
  constructor(_property: string) {
    this.property = _property;
  } 
  isActive(): boolean {
    return this.model !== undefined;
  }
  accepts(row: any) {

    console.log(row) 
    // not used; filtered on server side instead
    return true;
  }
/*  accepts(row: any, search: string): boolean {
    if ((row.hasOwnProperty(this.property)) && (row[this.property] === null)) {
      return false;
    }
    const substrings = search.split('|');
    for (const s of substrings) {
      if ((row.hasOwnProperty(this.property)) &&
        (row[this.property].toString().toLowerCase().includes(s.toLowerCase()))) {
        return true;
      }
    }
    return false;
  }*/
  get state() {
    return {col: 'test', value: this.model,value2:this.txt}
  }
  apply() {
    this.changes.next(this.model);
  }
  clear() {
    this.model = undefined;
    this.apply();
  }
}
class MyFilter implements ClrDatagridFilterInterface<any> {
    model: boolean = true;
    txt:string;
    changes = new Subject<any>();
    isActive(): boolean {
      return this.model !== undefined;
    }
    accepts(user: any) {   console.log(user) 
      // not used; filtered on server side instead
      return true;
    }
    get state() {
      return {col: 'contains-s', value: this.model,value2:this.txt}
    }
    apply() {
      this.changes.next(this.model);
    }
    clear() {
      this.model = undefined;
      this.apply();
    }
}

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {
  OrFilter = new OrFilter('name');
  myFilter2 = new MyFilter();
  private allUsers = Array.from({length: 50}, faker.helpers.userCard);

  users = this.allUsers;
  refresh(state: ClrDatagridStateInterface) {
    console.log(state) 
     console.log(this.allUsers)
      // mock server call 
      setTimeout(()=>{
        if (state.filters) {
          if (state.filters[0].model) {
            this.users = this.allUsers.filter(user => user.name.indexOf('s') > -1);
          } else {
            this.users = this.allUsers.filter(user => user.name.indexOf('s') === -1);
          }
        } else {
          this.users = this.allUsers;
        }
      }, 500);
  }
}

<div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
      <div style="position: relative">
			<clr-datagrid (clrDgRefresh)="refresh($event)">
        <clr-dg-column [clrDgField]="'name'">Name
        <clr-dg-filter [clrDgFilter]="myFilter2">
        "S" <input type="checkbox" clrCheckbox [(ngModel)]="myFilter2.model"/>
        <input clrInput placeholder="Fill me in, scotty!" name="name" [(ngModel)]="myFilter2.txt" />
        <button  (click)="myFilter2.apply()">apply</button>
        <button  (click)="myFilter2.clear()">clear</button>
      </clr-dg-filter>
        </clr-dg-column>



        <clr-dg-column [clrDgField]="'name'">
          Contains 's'
          <clr-dg-filter [clrDgFilter]="OrFilter">
            "S" <input type="checkbox" clrCheckbox [(ngModel)]="OrFilter.model"/>
            <input clrInput placeholder="Fill me in, scotty!" name="name" [(ngModel)]="OrFilter.txt" />
            <button  (click)="OrFilter.apply()">apply</button>
            <button  (click)="OrFilter.clear()">clear</button>
          </clr-dg-filter>
        </clr-dg-column>

        <clr-dg-row *ngFor="let user of users">
          <clr-dg-cell>{{user.name}}
          </clr-dg-cell>
          <clr-dg-cell>
            {{user.name.indexOf('s') !== -1}}
          </clr-dg-cell>
      </clr-dg-row>

        
      <clr-dg-footer>
        <clr-dg-pagination #pagination [clrDgPageSize]="10">
        </clr-dg-pagination>
      </clr-dg-footer>
        

      </clr-datagrid>
      </div>
		</div>
	</div>
</div>





https://stackoverflow.com/questions/470542/how-do-i-limit-the-number-of-rows-returned-by-an-oracle-query-after-ordering/57547541#57547541




import { Component, ElementRef, HostListener } from '@angular/core';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { ClrDatagridStateInterface } from '@clr/angular';
import { Subject } from 'rxjs';

@Component({
  selector: 'my-app',
  styleUrls: ['app.component.css'],
  templateUrl: 'app.component.html'
})
export class AppComponent {
  users: any;
  data: any;
  total: number;
  loading: boolean = true;
  cls:ClrDatagridStateInterface
  refreshGuard = true; // init to true to get first run data
  debouncer = new Subject<any>(); // this is now an enter key debouncer
 page = 0;
  constructor(private http: HttpClient,private elementRef:ElementRef) {
  

  }

  ngOnInit() {
    this.debouncer.asObservable().subscribe(state => {
      this.refresh(state);
    });
  }

  @HostListener("document:keydown.enter", ["$event"]) enterKeydownHandler(
    event: KeyboardEvent
  ) {
      // Use a host listener that checks the event element parent to make sure its a datagrid filter
    const eventSource: HTMLElement = event.srcElement as HTMLElement;
    const parentElement = eventSource.parentElement as HTMLElement;
    if (parentElement.classList.contains("datagrid-filter")) {
      // tell our guard its ok to refresh
      this.refreshGuard = true;
      // pass the latest state to the debouncer to make the request
      this.debouncer.next(this.cls);
    }
  }

  canNext() {
    return (this.data) ? (this.data.page < this.data.total_pages) : false;
  }
  
  canPrevious() {
    return (this.data) ? (this.data.page > 1) : false;
  }

  ngAfterViewInit() {
    this.elementRef.nativeElement.querySelector('.pagination-next')
                                  .addEventListener('click', this.onClick.bind(this));
  }

  onClick(event) {
    if (this.cls.page.from >= this.cls.page.size) {
      this.page = this.cls.page.from / this.cls.page.size;
    }
    this.page++;
    console.log(this.page);
    this.getdata(this.page)
  
  }
  getdata(page){
    this.http.get<any>('https://reqres.in/api/unknown?page=' + page).subscribe(async data => {
        console.log(data);
        this.users = data.data;
        this.data = data;
        this.loading = false;
        this.refreshGuard = false;
      });

  }
  refresh(state: ClrDatagridStateInterface) {
    if (this.refreshGuard) {
    this.loading = true;
    console.log(state);
    this.cls=state
    //this.debouncer.next(state);
    if (this.cls.page.from >= this.cls.page.size) {
      this.page = this.cls.page.from / this.cls.page.size;
    }
    this.page++;
    console.log('refresh:'+this.page);
    this.getdata(this.page)
 
   // console.log(1);
  }
   
  }
}




https://github.com/vmware/clarity/issues/1057
https://stackoverflow.com/questions/60980488/clarity-datagrid-column-input-filter-losing-focus-on-first-keypress-after-moving
/*
 * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, HostListener, ViewChild } from "@angular/core";
import { FetchResult, Inventory } from "./inventory/inventory";
import { User } from "./inventory/user";
import { ClrDatagridStateInterface } from "@clr/angular";
import { Subject } from "rxjs";
import { debounceTime } from "rxjs/operators";

@Component({
  selector: "clr-datagrid-full-demo",
  providers: [Inventory],
  templateUrl: "./app.component.html",
  styleUrls: ["./app.component.css"]
})
export class DatagridFullDemo {
  users: User[];
  total: number;
  loading: boolean = true;
  selectedUser;
  refreshGuard = true; // init to true to get first run data
  debouncer = new Subject<any>();
  datagridState: ClrDatagridStateInterface;

  constructor(private inventory: Inventory) {
    inventory.size = 103;
    this.inventory.reset();
    this.users = this.inventory.all;
  }

  ngOnInit() {
    this.debouncer.asObservable().subscribe(state => {
      this.doRefresh(state);
    });
  }

  private doRefresh(state: ClrDatagridStateInterface) {
    if (this.refreshGuard) {
      this.loading = true;
      const filters: { [prop: string]: any[] } = {};
      console.log("refresh called");
      if (state.filters) {
        for (const filter of state.filters) {
          const { property, value } = <{ property: string; value: string }>(
            filter
          );
          filters[property] = [value];
        }
      }
      this.inventory
        .filter(filters)
        .sort(<{ by: string; reverse: boolean }>state.sort)
        .fetch(state.page.from, state.page.size)
        .then((result: FetchResult) => {
          this.users = result.users;
          this.total = result.length;
          this.loading = false;
          this.selectedUser = this.users[1];
          this.refreshGuard = false;
        });
    }
  }

  @HostListener("document:keydown.enter", ["$event"]) enterKeydownHandler(
    event: KeyboardEvent
  ) {
    const eventSource: HTMLElement = event.srcElement as HTMLElement;
    const parentElement = eventSource.parentElement as HTMLElement;
    if (parentElement.classList.contains("datagrid-filter")) {
      this.refreshGuard = true;
      this.debouncer.next(this.datagridState);
    }
  }

  refresh(state: ClrDatagridStateInterface) {
    this.datagridState = state;
    this.debouncer.next(state);
  }
}

<div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
			<h2>SO <a href="https://stackoverflow.com/questions/60980488/clarity-datagrid-column-input-filter-losing-focus-on-first-keypress-after-moving">60980488</a></h2>

<clr-datagrid (clrDgRefresh)="refresh($event)" [clrDgLoading]="loading" [(clrDgSingleSelected)]="selectedUser">
  <clr-dg-column [clrDgField]="'id'">User ID</clr-dg-column>
  <clr-dg-column [clrDgField]="'name'">Name</clr-dg-column>

  <clr-dg-row *ngFor="let user of users" [clrDgItem]="user" >
    <clr-dg-cell>{{user.id}}</clr-dg-cell>
    <clr-dg-cell>{{user.name}}</clr-dg-cell>
  </clr-dg-row>

  <clr-dg-footer>
    {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{total}} users
    <clr-dg-pagination #pagination [clrDgTotalItems]="total" [clrDgPageSize]="10"></clr-dg-pagination>
  </clr-dg-footer>
</clr-datagrid>

Selected User: {{this.selectedUser | json}}
		</div>
	</div>
</div>



https://github.com/vmware/clarity/issues/1196 <div class="main-container">
	<header class="header-2">
		<div class="branding">
			<a class="nav-link">
				<clr-icon shape="home" size="24"></clr-icon>
				<span class="title">Project Clarity</span>
			</a>
		</div>
		<div class="header-nav">
			<a class="active nav-link nav-text">Home</a>
		</div>
	</header>
	<div class="content-container">
		<div class="content-area">
<clr-datagrid  (clrDgRefresh)="refresh($event)" [(clrDgSelected)]="selected">
  <clr-dg-column [clrDgSortOrder]="descSort">kk</clr-dg-column>

  <clr-dg-row *clrDgItems="let index of [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]">
    <clr-dg-cell >
      <ng-container *ngFor="let repeat of ' '.repeat(index).split('')">
        cell content cell content cell content
      </ng-container>
    </clr-dg-cell>
  </clr-dg-row>
  <clr-dg-footer>
        <clr-dg-pagination #pagination [clrDgPageSize]="pageSize" [clrDgTotalItems]="total" [clrDgPageSize]="pageSize" [(clrDgPage)]="currentPage">
          <clr-dg-page-size [clrPageSizeOptions]="[2, 5, 10]" (change)="onItemsPerPageChange($event)">Items per page</clr-dg-page-size>
          
          {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}}
          of {{pagination.totalItems}} page
      </clr-dg-pagination>
  </clr-dg-footer>
</clr-datagrid>
		</div>
	</div>
</div>
 
 import { Component } from '@angular/core';
import { ClrDatagridStateInterface } from '@clr/angular';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {
  total: number = 20;
  pageSize: number = 5;
  currentPage: number = 2;

  onItemsPerPageChange(event) {
    let newValue = +event.target.value.slice(3);
    if(this.pageSize !== newValue) {
      this.pageSize = newValue;
      
    }
  }

  refresh(state: ClrDatagridStateInterface) {
    console.log(state);
   
    if(state.page) {
 //alert('o')
    }
}
}

 
 legend: {	selector: [
						{ type: 'all', title: '全选' },
						{ type: 'inverse', title: '反选' },
					],
    data: ['Forest', 'Steppe', 'Desert', 'Wetland']
  },



https://support.huaweicloud.com/intl/en-us/sdk-dotnet-devg-obs/obs_25_0408.html
 <!--<div id="x" style="display:none;">
        <input type="radio" name="sex" value="male" checked>男
        <input type="radio" name="sex" value="female">女<p>
    </div>-->
////var dom = document.getElementById('chart-container');
////var dom2 = document.getElementById('chart-container2');
////var myChart = echarts.init(dom, null, {
////    renderer: 'canvas',
////    useDirtyRect: false
////});

////var myChart2 = echarts.init(dom2, null, {
////    renderer: 'canvas',
////    useDirtyRect: false
////});
var array = [];

var myChart = echarts.init(document.getElementById('chart-container'));
//var myChart2 = echarts.init(document.getElementById('chart-container2'));
var app = {};

optionq1 = {
    xAxis: {
        data: ['Animals', 'Fruits', 'Cars']
    },
    yAxis: {},
    dataGroupId: '',
    animationDurationUpdate: 500,
    series: {
        type: 'bar',
        id: 'sales',
        test: myChart.id,
        data: [
            {
                value: 5,
                groupId: 'animals'
            },
            {
                value: 2,
                groupId: 'fruits'
            },
            {
                value: 4,
                groupId: 'cars'
            }
        ],
        universalTransition: {
            enabled: true,
            divideShape: 'clone'
        }
    }
};

//let obj = new Object();
//obj.id = 'myChart'
//obj.class = myChart
//let obj2 = new Object();
//obj2.id = 'myChart2'
//obj2.class = myChart2
//var arr = [obj, obj2]

optionq2 = {
    xAxis: {
        data: ['Animals', 'Fruits', 'Cars']
    },
    yAxis: {},
    dataGroupId: '',
    animationDurationUpdate: 500,
    series: {
        type: 'bar',
        id: 'sales',
        data: [
            {
                value: 5,
                groupId: 'animals'
            },
            {
                value: 2,
                groupId: 'fruits'
            },
            {
                value: 4,
                groupId: 'cars'
            }
        ],
        universalTransition: {
            enabled: true,
            divideShape: 'clone'
        }
    }
};
//create('myChart', optionq1)
//create('myChart2', optionq2)


const clickFun = param => {
    console.log(param)
}
myChart.setOption(optionq1);
myChart.on('click', function (event) {
    if (event.componentType == 'graphic') {
        var gg = array.pop();
        if (gg == '2') {
            document.getElementById('x').style = "display:block"
        } else {
            document.getElementById('x').style = "display:none"
        }
    }
    if (event.data) {
        console.log(event.data.groupId)
        var subData = null;
        var flag;
        if (event.data.groupId != 'Cats') {
            subData = drilldownData.find(function (data) {
                return data.dataGroupId === event.data.groupId;
            });
            flag = 1
        }
        else {
            subData = drilldownData2.find(function (data) {
                return data.dataGroupId === event.data.groupId;
            });
            flag = 2
        }

        if (!subData) {
            return;
        }
        if (flag == 1) {
            array.push(flag);
            document.getElementById('x').style = "display:block;text-align: center;"

         
            option1 = {
                xAxis: {
                    data: subData.data.map(function (item) {
                        return item[0];
                    })
                },
                series: {
                    type: 'bar',
                    id: 'sales',
                    dataGroupId: subData.dataGroupId,
                    data: subData.data.map(function (item) {
                        let h = new Object();
                        h.groupId = item[0]
                        h.value = item[1]
                        return h;
                    })
                    //  subData.data.map(function (item) {
                    //     return item[1];
                    //  })
                    ,
                    universalTransition: {
                        enabled: true,
                        divideShape: 'clone'
                    }
                },
                graphic: [
                    {
                        type: 'text',
                        left: 50, name: 'ggg',
                        top: 20,
                        style: {
                            text: 'Back',
                            fontSize: 18
                        },
                        onclick: function () {
                            myChart.setOption(optionq1);
                        }
                    }
                ]
            }
        }

        if (flag == 2) {
            array.push(flag);
            document.getElementById('x').style = "display:none"
            var g = document.querySelector('input[name="sex"]:checked').value
            option2 = {
                xAxis: {
                    data: subData.data.map(function (item) {
                        return item[0];
                    })
                },
                series: {
                    type: 'bar',
                    id: 'sales',
                    dataGroupId: subData.dataGroupId,
                    data: subData.data.map(function (item) {
                        let h = new Object();
                        h.groupId = item[0]
                        h.value = item[1]
                        return h;
                    })
                    //  subData.data.map(function (item) {
                    //     return item[1];
                    //  })
                    ,
                    universalTransition: {
                        enabled: true,
                        divideShape: 'clone'
                    }
                },
                graphic: [
                    {
                        type: 'text',
                        left: 50,
                        top: 20,
                        style: {
                            text: 'Back',
                            fontSize: 18
                        },
                        name:'kkk',
                        info:
                            {},
                        onclick: function () {
                            myChart.setOption(option1);
                        }
                    }
                ]
            }
        }

        if (flag == 1) {
            myChart.setOption(option1)
        }
        if (flag == 2) {
            myChart.setOption(option2)
        }
    }
})

//myChart2.setOption(optionq2);
//myChart2.on('click', clickFun)
 
const drilldownData = [
    {
        dataGroupId: 'animals',
        data: [
            ['Cats', 4],
            ['Dogs', 2],
            ['Cows', 1],
            ['Sheep', 2],
            ['Pigs', 1]
        ]
    },
    {
        dataGroupId: 'fruits',
        data: [
            ['Apples', 4],
            ['Oranges', 2]
        ]
    },
    {
        dataGroupId: 'cars',
        data: [
            ['Toyota', 4],
            ['Opel', 2],
            ['Volkswagen', 2]
        ]
    }
];

const drilldownData2 = [
    {
        dataGroupId: 'Cats',
        data: [

            ['Dogs', 2],
            ['Cows', 1]

        ]
    }
];
 

//myChart2.on('click', function (event) {
//    if (event.data) {
//        console.log(event.data.groupId)
//        var subData = null;
//        var flag;
//        if (event.data.groupId !== 'Cats') {
//            subData = drilldownData.find(function (data) {
//                return data.dataGroupId === event.data.groupId;
//            });
//            flag = 1
//        }
//        else {
//            subData = drilldownData2.find(function (data) {
//                return data.dataGroupId === event.data.groupId;
//            });
//            flag = 2
//        }

//        if (!subData) {
//            return;
//        }
//        if (flag === 1) {
//             option11 = {
//                xAxis: {
//                    data: subData.data.map(function (item) {
//                        return item[0];
//                    })
//                },
//                series: {
//                    type: 'bar',
//                    id: 'sales',
//                    dataGroupId: subData.dataGroupId,
//                    data: subData.data.map(function (item) {
//                        let h = new Object();
//                        h.groupId = item[0]
//                        h.value = item[1]
//                        return h;
//                    })
//                    //  subData.data.map(function (item) {
//                    //     return item[1];
//                    //  })
//                    ,
//                    universalTransition: {
//                        enabled: true,
//                        divideShape: 'clone'
//                    }
//                },
//                graphic: [
//                    {
//                        type: 'text',
//                        left: 50,
//                        top: 20,
//                        style: {
//                            text: 'Back',
//                            fontSize: 18
//                        },
//                        onclick: function () {
//                            myChart2.setOption(option);
//                        }
//                    }
//                ]
//            }
//        }

//        if (flag === 2) {
//             option22 = {
//                xAxis: {
//                    data: subData.data.map(function (item) {
//                        return item[0];
//                    })
//                },
//                series: {
//                    type: 'bar',
//                    id: 'sales',
//                    dataGroupId: subData.dataGroupId,
//                    data: subData.data.map(function (item) {
//                        var h = new Object();
//                        h.groupId = item[0]
//                        h.value = item[1]
//                        return h;
//                    })
//                    //  subData.data.map(function (item) {
//                    //     return item[1];
//                    //  })
//                    ,
//                    universalTransition: {
//                        enabled: true,
//                        divideShape: 'clone'
//                    }
//                },
//                graphic: [
//                    {
//                        type: 'text',
//                        left: 50,
//                        top: 20,
//                        style: {
//                            text: 'Back',
//                            fontSize: 18
//                        },
//                        onclick: function () {
//                            myChart2.setOption(option11);
//                        }
//                    }
//                ]
//            }
//        }

//        if (flag === 1) {
//            myChart2.setOption(option11)
//        }
//        if (flag === 2) {
//            myChart2.setOption(option22)
//        }
//    }
//});


//if (option && typeof option === 'object') {
//    myChart.setOption(option);
//    myChart2.setOption(option);
//}

//window.addEventListener('resize', myChart.resize);
//window.addEventListener('resize', myChart2.resize);
option = {
  xAxis: {
    data: ['Animals', 'Fruits', 'Cars']
  },
  yAxis: {},
  dataGroupId: '',
  animationDurationUpdate: 500,
  series: {
    type: 'bar',
    id: 'sales',
    data: [
      {
        value: 5,
        groupId: 'animals'
      },
      {
        value: 2,
        groupId: 'fruits'
      },
      {
        value: 4,
        groupId: 'cars'
      }
    ],
    universalTransition: {
      enabled: true,
      divideShape: 'clone'
    }
  }
};
const drilldownData = [
  {
    dataGroupId: 'animals',
    data: [
      ['Cats', 4],
      ['Dogs', 2],
      ['Cows', 1],
      ['Sheep', 2],
      ['Pigs', 1]
    ]
  },
  {
    dataGroupId: 'fruits',
    data: [
      ['Apples', 4],
      ['Oranges', 2]
    ]
  },
  {
    dataGroupId: 'cars',
    data: [
      ['Toyota', 4],
      ['Opel', 2],
      ['Volkswagen', 2]
    ]
  }
];

const drilldownData2 = [
  {
    dataGroupId: 'Cats',
    data: [
    
      ['Dogs', 2],
      ['Cows', 1]
   
    ]
  } 
];
myChart.on('click', function (event) {
  if (event.data) {
  console.log(event.data.groupId)
   var subData=null;
   var flag ;
   if(event.data.groupId!='Cats') {
      subData = drilldownData.find(function (data) {
      return data.dataGroupId === event.data.groupId;
    });
     flag=1
   }
   else{
        subData = drilldownData2.find(function (data) {
      return data.dataGroupId === event.data.groupId;  });
          flag=2
   }
  
    if (!subData) {
      return;
    }
    if(  flag==1){
        option1 ={
      xAxis: {
        data: subData.data.map(function (item) {
          return item[0];
        })
      },
      series: {
        type: 'bar',
        id: 'sales',
        dataGroupId: subData.dataGroupId,
        data:  subData.data.map(function (item) {
      let h = new Object();
      h.groupId=item[0]
        h.value=item[1]
          return h;
        })
      //  subData.data.map(function (item) {
     //     return item[1];
      //  })
        ,
        universalTransition: {
          enabled: true,
          divideShape: 'clone'
        }
      },
      graphic: [
        {
          type: 'text',
          left: 50,
          top: 20,
          style: {
            text: 'Back',
            fontSize: 18
          },
          onclick: function () {
            myChart.setOption(option);
          }
        }
      ]
    }
    }
    
     if(  flag==2){
        option2 ={
      xAxis: {
        data: subData.data.map(function (item) {
          return item[0];
        })
      },
      series: {
        type: 'bar',
        id: 'sales',
        dataGroupId: subData.dataGroupId,
        data:  subData.data.map(function (item) {
      let h = new Object();
      h.groupId=item[0]
        h.value=item[1]
          return h;
        })
      //  subData.data.map(function (item) {
     //     return item[1];
      //  })
        ,
        universalTransition: {
          enabled: true,
          divideShape: 'clone'
        }
      },
      graphic: [
        {
          type: 'text',
          left: 50,
          top: 20,
          style: {
            text: 'Back',
            fontSize: 18
          },
          onclick: function () {
            myChart.setOption(option1);
          }
        }
      ]
    }
    }
    
 if(  flag==1){
    myChart.setOption(option1)}
    if(  flag==2){
    myChart.setOption(option2)}
  }
});
   HttpClient hc = new HttpClient();

            string url = "http://localhost:19461/WeatherForecast/receive";
            string path = @"C:\vm\unlocker-for-vmware-macos\backup\x64\vmware-vmx-debug.exe";
            var postContent = new MultipartFormDataContent();
            string boundary = string.Format("--{0}", DateTime.Now.Ticks.ToString("x"));
            postContent.Headers.Add("ContentType", $"multipart/form-data, boundary={boundary}");

            //if (files.Any())
            //{
            Stream stream = System.IO.File.Open(path, FileMode.Open);

            //files为文件key, files[0].FileName 为文件名称
            postContent.Add(new StreamContent(stream, (int)stream.Length), "files", "ElaneBoot.Schedule-master.7z");
                //Region为请求文件接口需要的参数，根据调用接口参数而定
                //postContent.Add(new StringContent(info.Region), "Region");

            //}
            var response = await hc.PostAsync(url, postContent);
            if (response.IsSuccessStatusCode)
            {
                //var responseStr = await response.Content.ReadAsStringAsync();
                //var responseObj = JsonConvert.DeserializeObject<WebApiResult>(responseStr);
                //return responseObj;
            }

  var body = Request.Body;

            var mediaType = MediaTypeHeaderValue.Parse(Request.ContentType);

            var boundary = mediaType.Parameters
                .SingleOrDefault(x =>
                    string.Equals(x.Name, "boundary", StringComparison.OrdinalIgnoreCase));

            // boundary を囲むダブル クォーテーションを除去する
            var reader = new MultipartReader(boundary.Value.Trim('"'), body);

             


            MultipartSection section = await reader.ReadNextSectionAsync();

            while (section != null)
            {
                bool hasContentDispositionHeader = ContentDispositionHeaderValue.TryParse(
                section.ContentDisposition, out ContentDispositionHeaderValue contentDisposition);

                if (hasContentDispositionHeader)
                {
                    using (var fileStream = System.IO.File.Create(@"c:\test\kk"))
                    {

                        section.Body.CopyToAsync(fileStream).Wait();

                    }
                }

                section = await reader.ReadNextSectionAsync();
            }
https://cloudaffaire.com/azure/update-2-asp-net-core-web-api-upload-and-download-file-stream-exception/
ASPxComboBox combo2 = ((ASPxComboBox)grid.FindEditRowCellTemplateControl(
                grid.Columns["Category2ID"] as GridViewDataComboBoxColumn, "Cat2"));

function getBroswer(){
    var Sys = {};
    var ua = navigator.userAgent.toLowerCase();
    var s;
    (s = ua.match(/edge\/([\d.]+)/)) ? Sys.edge = s[1] :
    (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? Sys.ie = s[1] :
    (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] :
    (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] :
    (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] :
    (s = ua.match(/opera.([\d.]+)/)) ? Sys.opera = s[1] :
    (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;

    if (Sys.edge) return { broswer : "Edge", version : Sys.edge };
    if (Sys.ie) return { broswer : "IE", version : Sys.ie };
    if (Sys.firefox) return { broswer : "Firefox", version : Sys.firefox };
    if (Sys.chrome) return { broswer : "Chrome", version : Sys.chrome };
    if (Sys.opera) return { broswer : "Opera", version : Sys.opera };
    if (Sys.safari) return { broswer : "Safari", version : Sys.safari };
    
    return { broswer : "", version : "0" };
}
var abc = getBroswer();
alert("broswer:"+abc.broswer+" version:"+abc.version);
  var duplicates1 = GetTable().AsEnumerable().Where(g => g["Name"].ToString().Length > 2)
               .Select(g => g["Index"].ToString()).ToList();

https://www.aspsnippets.com/Articles/Using-jQuery-UI-Dialog-Modal-Popup-with-ASPNet-AJAX-UpdatePanel.aspx

var duplicates = GetTable().AsEnumerable()
                .GroupBy(i => new { Name = i.Field<string>("Name"), Subject = i.Field<string>("Subject") })
                .Where(g => g.Count() > 1)
                .Select(g => new { g.Key.Name, g.Key.Subject, 
                    Values = string.Join(",",g.SelectMany(i => i["Index"].ToString()).Distinct().ToList()) }).ToList();

  <asp:AsyncPostBackTrigger ControlID="ddlFruits" EventName="SelectedIndexChanged" />
<%@ Page Language="C#" AutoEventWireup="True" CodeBehind="WebForm4.aspx.cs" Inherits="WebApplication2.WebForm4" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
      <script src="./js1/jquery-2.2.4.min.js"></script>
     <script type="text/javascript" src='https://ajax.​aspnetcdn.com/ajax/jquery.ui/1.8.22/jquery-ui.js'></script>
 <%--   <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.10/themes/redmond/jquery-ui.css">--%>
   <%-- <link rel="stylesheet" href="./css1/ui.jqgrid.css">--%>
   <%-- <link rel="stylesheet" href="./css1/bootstrap.min.css">
    <link rel="stylesheet" href="./css1/bootstrap-datetimepicker.min.css">--%>


    <%--  <script src="./js1/jquery-ui.min.js"></script>
    <script src="./js1/jquery-migrate-1.2.1.js"></script>
    <script src="./js1/bootstrap.min.js"></script>
    <script src="./js1/moment.min.js"></script>
    <script src="./js1/bootstrap-datetimepicker.min.js"></script>
    <script src="./js1/jquery.jqGrid.src.js"></script>--%>
     

    <title></title>
     <style type="text/css">
  /* .roundedBorders {  
    border-radius: 5px;  
    -moz-border-radius: 5px;  
    -khtml-border-radius: 5px;  
    -webkit-border-radius: 5px;  
    overflow: hidden !important;  
    overflow-x: hidden !important;  
    overflow-y: hidden !important;  */
 </style>
       <script type="text/javascript"> 
     
           $("#Button1").click(function () {
                window.parent.$("#export").dialog('close');
            });
       </script>
</head>
<body>
    <form id="form1" runat="server" >
             <asp:Button ID="Button1" runat="server" Text="Button" />
        <asp:ScriptManager ID="ScriptManager1" runat="server"></asp:ScriptManager>
 
      <asp:Label ID="Label7" runat="server" Text="上傳Excel檔Wafer ID Infomation："></asp:Label>
         <asp:FileUpload ID="fuExcel" runat="server" Width="70%" />
        <asp:Button ID="btnUploadExcel" runat="server" Text="Excel上傳" ToolTip="Excel上傳" OnClick="btnUploadExcel_Click" />
    
        <asp:UpdatePanel ID="UpdatePanel1" runat="server">
            <ContentTemplate>
          
            </ContentTemplate>
            <Triggers>
                <asp:PostBackTrigger ControlID="btnUploadExcel"></asp:PostBackTrigger>
            </Triggers>
        </asp:UpdatePanel>
    
   
     
      
    </form>
   
</body>
</html>
 


 
 
